name: Generate and Publish Backend Documentation

on:
  push:
    paths:
      - 'backend/**'
    branches:
      - master # Trigger only on master branch upon push
  workflow_dispatch: # Allows manual triggering

jobs:
  build-docs:
    runs-on: ubuntu-latest
    steps:
      # 1. Check out the repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Set up Java 21
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: '21'
          cache: 'maven' # Enable Maven caching

      # 3. Build all backend modules and install to local repo
      - name: Build & install all backend modules
        run: |
          cd backend
          mvn clean install -DskipTests

      # 4a. Start Spring Boot Application
      - name: Start Spring Boot Application
        run: |
          cd backend/grafioschtrader-server
          # Ensure this matches the configuration in the POM if you use this approach
          # Requires <apiDocsUrl>http://localhost:8080/api-docs</apiDocsUrl> uncommented in pom.xml
          mvn spring-boot:start

      # 4b. Wait for Application to Start reliably
      - name: Wait for Application to Start
        run: |
          echo "Waiting for application to be ready on port 8080..."
          # Wait for port 8080 to be open (TCP check)
          # Adjust timeout (seconds) as needed for your application's startup time
          timeout_seconds=90
          while ! nc -z localhost 8080 && [[ $timeout_seconds -gt 0 ]]; do
            sleep 2 # Check every 2 seconds
            timeout_seconds=$((timeout_seconds-2))
            echo -n "." # Print progress dots
          done
          echo # Newline after dots

          if [[ $timeout_seconds -le 0 ]]; then
            echo "Application failed to start listening on port 8080 within 90 seconds."
            # Optional: Try to capture logs from Spring Boot if possible/needed
            exit 1
          else
            echo "Application appears to be listening on port 8080."
          fi

      # 4c. Generate OpenAPI spec (connecting to running app)
      - name: Generate OpenAPI spec
        run: |
          cd backend/grafioschtrader-server
          echo "Attempting to generate OpenAPI spec from running application..."
          # This REQUIRES <apiDocsUrl>...</apiDocsUrl> to be present and correct in pom.xml
          mvn springdoc-openapi:generate -Dmaven.javadoc.failOnError=false -Ddoclint=none
          echo "OpenAPI generation command finished."


      # 4d. Generate Javadoc (App doesn't need to run for this)
      - name: Generate Javadoc
        run: |
          cd backend/grafioschtrader-server
          mvn javadoc:javadoc -Dmaven.javadoc.failOnError=false -Ddoclint=none

      # 4e. Stop Spring Boot Application (runs even if previous steps fail)
      - name: Stop Spring Boot Application
        # Use 'always()' to ensure cleanup happens even if 'generate' fails
        if: always()
        run: |
          echo "Attempting to stop Spring Boot application..."
          cd backend/grafioschtrader-server
          # Use || echo to prevent the workflow step from failing if the stop command itself fails
          # (e.g., if the app didn't start correctly)
          mvn spring-boot:stop || echo "Stop command finished (may have failed if app was not running)."
          # Optional fallback kill if stop is unreliable
          # pkill -f 'grafioschtrader.*jar' || echo "pkill fallback executed."

      # 5. Prepare docs directory for Pages
      - name: Prepare docs directory
        run: |
          echo "--- Preparing docs directory ---"
          rm -rf docs
          mkdir -p docs/swagger

          echo "--- Copying Javadoc ---"
          # Check if the directory exists before copying
          if [ -d "backend/grafioschtrader-server/target/site/apidocs" ]; then
            cp -R backend/grafioschtrader-server/target/site/apidocs/* docs/
            echo "Javadoc copied."
          else
            echo "ERROR: Javadoc directory 'backend/grafioschtrader-server/target/site/apidocs' not found!"
            # Optional: Fail the workflow
            # exit 1
          fi

          echo "--- Copying OpenAPI spec ---"
           # Check if the file exists
          if [ -f "backend/grafioschtrader-server/target/generated-docs/openapi.json" ]; then
            cp backend/grafioschtrader-server/target/generated-docs/openapi.json docs/swagger/
            echo "OpenAPI spec copied."
          else
             echo "ERROR: OpenAPI spec 'backend/grafioschtrader-server/target/generated-docs/openapi.json' not found!"
             # Optional: Fail the workflow
             # exit 1
          fi

          echo "--- Setting up Swagger UI ---"
          # Use the specified newer version of Swagger UI
          SWAGGER_UI_VERSION="v5.21.0" # <-- Updated version here
          echo "Using Swagger UI Version: ${SWAGGER_UI_VERSION}"
          wget -qO- "https://github.com/swagger-api/swagger-ui/archive/refs/tags/${SWAGGER_UI_VERSION}.tar.gz" \
            | tar xz --strip-components=1 "swagger-ui-${SWAGGER_UI_VERSION#v}/dist" -C docs/swagger/

          # Set the correct path to openapi.json in index.html
          # The path must be relative to index.html (which is in docs/swagger/)
          cat > docs/swagger/index.html << 'EOF'
          <!DOCTYPE html>
          <html lang="en">
            <head>
              <meta charset="UTF-8">
              <title>API Documentation</title>
              <link rel="stylesheet" type="text/css" href="./swagger-ui.css" />
              <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
              <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
              <style>
                html { box-sizing: border-box; overflow: -moz-scrollbars-vertical; overflow-y: scroll; }
                *, *:before, *:after { box-sizing: inherit; }
                body { margin:0; background: #fafafa; }
              </style>
            </head>
            <body>
              <div id="swagger-ui"></div>
              <script src="./swagger-ui-bundle.js" charset="UTF-8"> </script>
              <script src="./swagger-ui-standalone-preset.js" charset="UTF-8"> </script>
              <script>
              window.onload = function() {
                // Begin Swagger UI call region
                const ui = SwaggerUIBundle({
                  url: "./openapi.json", // Path to JSON relative to this HTML
                  dom_id: '#swagger-ui',
                  deepLinking: true,
                  presets: [
                    SwaggerUIBundle.presets.apis,
                    SwaggerUIStandalonePreset
                  ],
                  plugins: [
                    SwaggerUIBundle.plugins.DownloadUrl
                  ],
                  layout: "StandaloneLayout"
                });
                // End Swagger UI call region
                window.ui = ui;
              };
              </script>
            </body>
          </html>
          EOF # <<< NO LEADING SPACES HERE
          echo "Swagger UI index.html created."
          echo "--- Docs directory preparation complete ---"


      # 6. Upload the docs folder as a Pages artifact (Unchanged)
      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: docs

  deploy-pages:
    needs: build-docs
    # ... (Unchanged deployment job) ...
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4