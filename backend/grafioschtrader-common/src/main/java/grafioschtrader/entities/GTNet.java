package grafioschtrader.entities;

import com.fasterxml.jackson.annotation.JsonIgnore;

import grafioschtrader.common.PropertyOnlyCreation;
import grafioschtrader.gtnet.GTNetServerStateTypes;
import io.swagger.v3.oas.annotations.media.Schema;
import jakarta.persistence.Basic;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;

@Entity
@Table(name = GTNet.TABNAME)
@Schema(description = "Contains the domain configuration for the GT-Network")
public class GTNet extends BaseID {

  public static final String TABNAME = "gt_net";

  @Id
  @GeneratedValue(strategy = GenerationType.IDENTITY)
  @Column(name = "id_gt_net")
  private Integer idGtNet;
  
  @Schema(description = "Name or ip address of this remote domain")
  @NotNull
  // @WebUrl
  @Column(name = "domain_remote_name")
  private String domainRemoteName;

  
  @Schema(description = "Time Zone as java it offers, it may help the user to lcalize a server")
  @Basic(optional = false)
  @NotNull
  @Size(min = 1, max = 50)
  @Column(name = "time_zone")
  @PropertyOnlyCreation
  private String timeZone;
  
  
  @JsonIgnore
  @Schema(description = "Access token to this server, is generated by this server.")
  @Column(name = "token_this")
  private String tokenThis;

  @JsonIgnore
  @Schema(description = "Access token to the remote domain, is generated by remote domain.")
  @Column(name = "token_remote")
  private String tokenRemote;

  @Schema(description = "May the capability as distributors of this domoain be passed to other domains?")
  @Column(name = "spread_capability")
  private boolean spreadCapability;

  @Schema(description = "That this server give away entitiy data and it has the right state")
  @Column(name = "entity_server_state")
  private byte entityServerState;

  @Schema(description = "Double-sided stamping of entity data")
  @Column(name = "accept_entity_request")
  private boolean acceptEntityRequest;

  @Schema(description = "The daily request limit which the remote domain can request data on this server")
  @Column(name = "daily_req_limit")
  private Integer dailyRequestLimit;

  @Schema(description = "The daily request counter which counts the remote domains request for data on this server. This counter is set to null at UTC 00:00")
  @Column(name = "daily_req_limit_count")
  private Integer dailyRequestLimitCount;

  @Schema(description = "The daily request limit which this server can request data on the remote domain")
  @Column(name = "daily_req_limit_remote")
  private Integer dailyRequestLimitRemote;

  @Schema(description = "Counts the number of request which were done on the remote system thru this server. This counter is set to null at UTC 00:00")
  @Column(name = "daily_req_limit_remote_count")
  private Integer dailyRequestLimitRemoteCount;

  @Schema(description = "That this remote domain is in state for the distribution of intraday data.")
  @Column(name = "lastprice_server_state")
  private byte lastpriceServerState;

  @Schema(description = "Should this provider be used by this server for last price. 0 -> not using, Greater than 0 means priority")
  @Column(name = "lastprice_consumer_usage")
  private byte lastpriceConsumerUsage;

  @Schema(description = "Shall be used the last price detail log. It records which client changed last prices")
  @Column(name = "lastprice_use_detail_log")
  private boolean lastpriceUseDetailLog;

  public Integer getIdGtNet() {
    return idGtNet;
  }

  public void setIdGtNet(Integer idGtNet) {
    this.idGtNet = idGtNet;
  }

  public String getDomainRemoteName() {
    return domainRemoteName;
  }

  public void setDomainRemoteName(String domainRemoteName) {
    this.domainRemoteName = domainRemoteName;
  }
  
  public String getTimeZone() {
    return timeZone;
  }

  public void setTimeZone(String timeZone) {
    this.timeZone = timeZone;
  }

  public String getTokenThis() {
    return tokenThis;
  }

  public void setTokenThis(String tokenThis) {
    this.tokenThis = tokenThis;
  }

  public String getTokenRemote() {
    return tokenRemote;
  }

  public void setTokenRemote(String tokenRemote) {
    this.tokenRemote = tokenRemote;
  }

  public boolean isSpreadCapability() {
    return spreadCapability;
  }

  public void setSpreadCapability(boolean spreadCapability) {
    this.spreadCapability = spreadCapability;
  }

  public GTNetServerStateTypes getEntityServerState() {
    return GTNetServerStateTypes.getGTNetServerStateType(entityServerState);
  }

  public void setEntityServerState(GTNetServerStateTypes entityServerState) {
    this.entityServerState = entityServerState.getValue();
  }

  public boolean isAcceptEntityRequest() {
    return acceptEntityRequest;
  }

  public void setAcceptEntityRequest(boolean acceptEntityRequest) {
    this.acceptEntityRequest = acceptEntityRequest;
  }

  public Integer getDailyRequestLimit() {
    return dailyRequestLimit;
  }

  public void setDailyRequestLimit(Integer dailyRequestLimit) {
    this.dailyRequestLimit = dailyRequestLimit;
  }

  public Integer getDailyRequestLimitCount() {
    return dailyRequestLimitCount;
  }

  public void setDailyRequestLimitCount(Integer dailyRequestLimitCount) {
    this.dailyRequestLimitCount = dailyRequestLimitCount;
  }

  public Integer getDailyRequestLimitRemote() {
    return dailyRequestLimitRemote;
  }

  public void setDailyRequestLimitRemote(Integer dailyRequestLimitRemote) {
    this.dailyRequestLimitRemote = dailyRequestLimitRemote;
  }

  public Integer getDailyRequestLimitRemoteCount() {
    return dailyRequestLimitRemoteCount;
  }

  public void setDailyRequestLimitRemoteCount(Integer dailyRequestLimitRemoteCount) {
    this.dailyRequestLimitRemoteCount = dailyRequestLimitRemoteCount;
  }

  public GTNetServerStateTypes getLastpriceServerState() {
    return GTNetServerStateTypes.getGTNetServerStateType(lastpriceServerState);
  }

  public void setLastpriceServerState(GTNetServerStateTypes lastpriceServerState) {
    this.lastpriceServerState = lastpriceServerState.getValue();
  }

  public byte getLastpriceConsumerUsage() {
    return lastpriceConsumerUsage;
  }

  public void setLastpriceConsumerUsage(byte lastpriceConsumerUsage) {
    this.lastpriceConsumerUsage = lastpriceConsumerUsage;
  }

  public boolean isLastpriceUseDetailLog() {
    return lastpriceUseDetailLog;
  }

  public void setLastpriceUseDetailLog(boolean lastpriceUseDetailLog) {
    this.lastpriceUseDetailLog = lastpriceUseDetailLog;
  }

  @Override
  public Integer getId() {
    return idGtNet;
  }

}
