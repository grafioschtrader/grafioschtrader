package grafioschtrader.entities;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

import grafioschtrader.common.PropertyAlwaysUpdatable;
import grafioschtrader.common.PropertyOnlyCreation;
import grafioschtrader.common.PropertySelectiveUpdatableOrWhenNull;
import grafioschtrader.gtnet.GTNetMessageCodeType;
import grafioschtrader.gtnet.SendReceivedType;
import io.swagger.v3.oas.annotations.media.Schema;
import jakarta.persistence.CollectionTable;
import jakarta.persistence.Column;
import jakarta.persistence.ElementCollection;
import jakarta.persistence.Embeddable;
import jakarta.persistence.Entity;
import jakarta.persistence.FetchType;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.MapKeyColumn;
import jakarta.persistence.MappedSuperclass;
import jakarta.persistence.Table;
import jakarta.persistence.Temporal;
import jakarta.persistence.TemporalType;

@Entity
@Table(name = GTNetMessage.TABNAME)
@Schema(description = """
    This entity records the basic messages between the instances of the GT network.
    In addition, these messages are also used to communicate between the GT instances.""")
public class GTNetMessage extends BaseID {

  public static final String TABNAME = "gt_net_message";
  public static final String GT_NET_MESSAGE_PARAM = "gt_net_message_param";

  @Id
  @GeneratedValue(strategy = GenerationType.IDENTITY)
  @Column(name = "id_gt_net_message")
  private Integer idGtNetMessage;

  @Schema(description = "Connection to GTNet")
  @Column(name = "id_gt_net")
  private Integer idGtNet;

  @Schema(description = "When was this message created. It must be UTC Time")
  @Column(name = "timestamp")
  @Temporal(TemporalType.TIMESTAMP)
  private Date timestamp;

  @Schema(description = "Distinguish whether the message was sent or received")
  @Column(name = "send_recv")
  private byte sendRecv;

  @Schema(description = "Used if this message refers to a previous one")
  @PropertyOnlyCreation
  @Column(name = "reply_to")
  private Integer replyTo;

  @Schema(description = "If the messages are generated by the system, then a code is transmitted")
  @PropertySelectiveUpdatableOrWhenNull
  @Column(name = "message_code")
  private byte messageCode;
  
  @Schema(description = "Contains optional a message. This message is mostly created by the user")
  @PropertyOnlyCreation
  @Column(name = "message")
  private String message;
  
  @Schema(description = "The error message that has not yet been translated.")
  @Column(name = "error_msg_code")
  private String errorMsgCode;

  @Schema(description = "Was the message read")
  @PropertyAlwaysUpdatable
  @Column(name = "has_been_read")
  private boolean hasBeenRead;
  
  
  @ElementCollection(fetch = FetchType.EAGER)
  @MapKeyColumn(name = "param_name")
  @CollectionTable(name = GT_NET_MESSAGE_PARAM, joinColumns = @JoinColumn(name = "id_gt_net_message"))
  private Map<String, GTNetMessageParam> gtNetMessageParamMap = new HashMap<>();
 
  public GTNetMessage() {
  }

  public GTNetMessage(Integer idGtNet, Date timestamp, byte sendRecv, Integer replyTo, byte messageCode,
      String message, Map<String, GTNetMessageParam> gtNetMessageParamMap) {
    super();
    this.idGtNet = idGtNet;
    this.timestamp = timestamp;
    this.sendRecv = sendRecv;
    this.replyTo = replyTo;
    this.messageCode = messageCode;
    this.message = message;
    this.gtNetMessageParamMap = gtNetMessageParamMap;
  }

  public Integer getIdGtNetMessage() {
    return idGtNetMessage;
  }

  public void setIdGtNetMessage(Integer idGtNetMessage) {
    this.idGtNetMessage = idGtNetMessage;
  }

  public Integer getIdGtNet() {
    return idGtNet;
  }

  public void setIdGtNet(Integer idGtNet) {
    this.idGtNet = idGtNet;
  }
  

  public Date getTimestamp() {
    return timestamp;
  }

  public void setTimestamp(Date timestamp) {
    this.timestamp = timestamp;
  }

  public SendReceivedType getSendRecv() {
    return SendReceivedType.getSendReceivedType(sendRecv);
  }

  public void setSendRecv(SendReceivedType sendReceivedType) {
    this.sendRecv = sendReceivedType.getValue();
  }

  public Integer getReplyTo() {
    return replyTo;
  }

  public void setReplyTo(Integer replyTo) {
    this.replyTo = replyTo;
  }

  public GTNetMessageCodeType getMessageCode() {
    return GTNetMessageCodeType.getGTNetMessageCodeTypeByValue(messageCode);
  }

  public void setMessageCode(GTNetMessageCodeType gtNetMessageCodeType) {
    this.messageCode = gtNetMessageCodeType.getValue();
  }
 
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }
  

  public String getErrorMsgCode() {
    return errorMsgCode;
  }

  public void setErrorMsgCode(String errorMsgCode) {
    this.errorMsgCode = errorMsgCode;
  }

  public Map<String, GTNetMessageParam> getGtNetMessageParamMap() {
    return gtNetMessageParamMap;
  }

  public void setGtNetMessageParamMap(Map<String, GTNetMessageParam> gtNetMessageParamMap) {
    this.gtNetMessageParamMap = gtNetMessageParamMap;
  }
  
  
  public boolean isHasBeenRead() {
    return hasBeenRead;
  }

  public void setHasBeenRead(boolean hasBeenRead) {
    this.hasBeenRead = hasBeenRead;
  }

  @Override
  public Integer getId() {
    return idGtNetMessage;
  }

  @Embeddable
  @MappedSuperclass
  public static class GTNetMessageParam extends BaseParam {
    public GTNetMessageParam() {
    }

    public GTNetMessageParam(String paramValue) {
      this.paramValue = paramValue;
    }
  }
  
}
