Assetclass.getUnusedAssetclassForAlgo=SELECT a.* FROM assetclass a WHERE a.spec_invest_instrument <> 4 AND a.id_asset_class NOT IN (SELECT aa.id_asset_class FROM algo_top_asset_security ata JOIN algo_top as at ON ata.id_algo_assetclass_security = at.id_algo_assetclass_security JOIN algo_assetclass aa ON at.id_algo_assetclass_security = aa.id_algo_assetclass_security_p WHERE ata.id_tenant = ?1 AND ata.id_algo_assetclass_security = ?2)

Cashaccount.findByPortfolioNameAndName=SELECT c.id_securitycash_account, s.name, s.note, s.id_portfolio, c.start_amount, c.balance, c.currency FROM cashaccount c, securitycashaccount s, portfolio p WHERE c.id_securitycash_account = s.id_securitycash_account AND s.id_portfolio = p.id_portfolio AND p.name=?1 AND s.name=?2

Currencypair.getAllCurrencypairsByTenantInPortfolioAndAccounts=(SELECT c1.*, sc.* FROM currencypair c1, securitycurrency sc, (SELECT DISTINCT s.currency as fromcurrency, e.currency as tocurrency FROM tenant e, portfolio p, securitycashaccount sc, transaction t, security s WHERE e.id_tenant = ?1 AND e.id_tenant = p.id_tenant AND p.id_portfolio = sc.id_portfolio AND sc.id_securitycash_account = t.id_security_account AND t.id_securitycurrency = s.id_securitycurrency) c2 WHERE c1.from_currency = fromcurrency AND c1.to_currency = tocurrency AND c1.id_securitycurrency = sc.id_securitycurrency) UNION (SELECT DISTINCT c.*, sc.* FROM tenant e, currencypair c, portfolio p, cashaccount a, securitycashaccount s, securitycurrency sc WHERE e.id_tenant = ?1 AND e.id_tenant = p.id_tenant AND c.from_currency = a.currency AND c.to_currency = e.currency AND p.id_portfolio = s.id_portfolio AND a.id_securitycash_account = s.id_securitycash_account AND c.id_securitycurrency = sc.id_securitycurrency) UNION (SELECT DISTINCT c.*, sc.* FROM portfolio p JOIN securitycashaccount sa ON p.id_portfolio = sa.id_portfolio JOIN transaction t ON t.id_security_account = sa.id_securitycash_account JOIN security s ON t.id_securitycurrency = s.id_securitycurrency JOIN currencypair c ON c.from_currency = s.currency AND c.to_currency = p.currency  JOIN securitycurrency sc ON sc.id_securitycurrency = c.id_securitycurrency WHERE p.id_tenant = ?1)
Currencypair.getAllCurrencypairsByPortfolioInPortfolioAndAccounts=(SELECT c1.*, sc.* FROM currencypair c1, securitycurrency sc, (SELECT DISTINCT s.currency as fromcurrency, p.currency as tocurrency FROM portfolio p, securitycashaccount sc, transaction t, security s WHERE p.id_portfolio = ?1 AND p.id_portfolio = sc.id_portfolio  AND sc.id_securitycash_account = t.id_security_account  AND t.id_securitycurrency = s.id_securitycurrency) c2  WHERE c1.from_currency = fromcurrency AND c1.to_currency = tocurrency AND c1.id_securitycurrency = sc.id_securitycurrency) UNION (SELECT DISTINCT  cp.*, sc.*  FROM currencypair cp, portfolio p, cashaccount c, securitycashaccount s, securitycurrency sc  WHERE  p.id_portfolio = ?1  AND p.id_portfolio = s.id_portfolio  AND cp.from_currency = c.currency  AND cp.to_currency = p.currency  AND c.id_securitycash_account = s.id_securitycash_account  AND cp.id_securitycurrency = sc.id_securitycurrency)
Currencypair.getAllUsedCurrencypairs=(SELECT DISTINCT c.*, sc.* FROM currencypair c, transaction t, securitycurrency sc WHERE c.id_securitycurrency = t.id_currency_pair AND c.id_securitycurrency = sc.id_securitycurrency) UNION (SELECT DISTINCT c.*, sc.* FROM currencypair c, tenant t, portfolio p, securitycurrency sc WHERE c.from_currency = p.currency AND c.to_currency = t.currency AND t.id_tenant = p.id_tenant  AND c.id_securitycurrency = sc.id_securitycurrency) UNION (SELECT DISTINCT c.*, sc.*  FROM currencypair c, portfolio p, cashaccount a, securitycashaccount s, securitycurrency sc  WHERE c.from_currency = a.currency AND c.to_currency = p.currency AND p.id_portfolio = s.id_portfolio AND a.id_securitycash_account = s.id_securitycash_account AND c.id_securitycurrency = sc.id_securitycurrency)
Currencypair.getCurrencypairInTransactionByTenant=SELECT DISTINCT c.*, sc.* FROM currencypair c, transaction t, securitycurrency sc WHERE t.id_tenant = ?1 AND t.id_currency_pair = c.id_securitycurrency AND c.id_securitycurrency = sc.id_securitycurrency
Currencypair.getCurrencypairInTransactionByPortfolioId=SELECT DISTINCT c.*, s.* FROM currencypair c, transaction t, portfolio p, securitycashaccount sc, cashaccount ca, securitycurrency s WHERE sc.id_portfolio = p.id_portfolio AND sc.id_securitycash_account = ca.id_securitycash_account AND t.id_cash_account = ca.id_securitycash_account AND t.id_currency_pair = c.id_securitycurrency AND c.id_securitycurrency = s.id_securitycurrency AND p.id_portfolio = ?1 AND p.id_tenant = ?2
Currencypair.getAllCurrencypairsForTenantByTenant=(SELECT c1.*, sc.* FROM currencypair c1, securitycurrency sc, (SELECT DISTINCT s.currency as fromcurrency, e.currency as tocurrency FROM tenant e, portfolio p, securitycashaccount sc, transaction t, security s WHERE e.id_tenant = ?1 AND e.id_tenant = p.id_portfolio AND p.id_portfolio = sc.id_portfolio AND sc.id_securitycash_account = t.id_security_account AND t.id_securitycurrency = s.id_securitycurrency) c2 WHERE c1.from_currency = fromcurrency AND c1.to_currency = tocurrency AND c1.id_securitycurrency = sc.id_securitycurrency AND c1.from_currency <> c1.to_currency) UNION (SELECT DISTINCT c.*, sc.* FROM tenant e, currencypair c, portfolio p, cashaccount a, securitycashaccount s, securitycurrency sc WHERE e.id_tenant = ?1 AND e.id_tenant = p.id_tenant AND c.from_currency = a.currency AND c.to_currency = e.currency AND p.id_portfolio = s.id_portfolio AND a.id_securitycash_account = s.id_securitycash_account AND c.id_securitycurrency = sc.id_securitycurrency AND c.from_currency <> c.to_currency) UNION (SELECT DISTINCT c.*, s.*  FROM currencypair c, transaction t, portfolio p, securitycashaccount sc, cashaccount ca, securitycurrency s  WHERE p.id_tenant = ?1 AND p.id_portfolio = sc.id_portfolio  AND sc.id_securitycash_account = ca.id_securitycash_account  AND t.id_cash_account = ca.id_securitycash_account  AND t.id_currency_pair = c.id_securitycurrency  AND c.id_securitycurrency = s.id_securitycurrency)
Currencypair.getAllCurrencypairsForPortfolioByPortfolio=(SELECT c1.*, sc.* FROM currencypair c1, securitycurrency sc, (SELECT DISTINCT s.currency as fromcurrency, p.currency as tocurrency FROM portfolio p, securitycashaccount sc, transaction t, security s WHERE p.id_portfolio = ?1 AND p.id_portfolio = sc.id_portfolio  AND sc.id_securitycash_account = t.id_security_account  AND t.id_securitycurrency = s.id_securitycurrency) c2  WHERE c1.from_currency = fromcurrency AND c1.to_currency = tocurrency AND c1.id_securitycurrency = sc.id_securitycurrency) UNION (SELECT DISTINCT  cp.*, sc.*  FROM currencypair cp, portfolio p, cashaccount c, securitycashaccount s, securitycurrency sc  WHERE  p.id_portfolio = ?1 AND p.id_portfolio = s.id_portfolio  AND cp.from_currency = c.currency  AND cp.to_currency = p.currency  AND c.id_securitycash_account = s.id_securitycash_account  AND cp.id_securitycurrency = sc.id_securitycurrency) UNION (SELECT DISTINCT c.*, s.* FROM currencypair c, transaction t, portfolio p, securitycashaccount sc, cashaccount ca, securitycurrency s  WHERE sc.id_portfolio = p.id_portfolio AND sc.id_securitycash_account = ca.id_securitycash_account AND t.id_cash_account = ca.id_securitycash_account AND t.id_currency_pair = c.id_securitycurrency AND c.id_securitycurrency = s.id_securitycurrency AND p.id_portfolio = ?1)
Currencypair.getSecurityTransactionCurrenciesForTenantExclude=SELECT DISTINCT s.currency FROM transaction t JOIN security s ON t.id_securitycurrency = s.id_securitycurrency WHERE t.id_tenant = ?1 AND s.currency <> ?2
Currencypair.getSecurityTransactionCurrenciesForPortfolioExclude=SELECT DISTINCT s.currency FROM portfolio p JOIN securitycashaccount sa ON p.id_portfolio = sa.id_portfolio JOIN transaction t ON sa.id_securitycash_account = t.id_cash_account JOIN security s ON t.id_securitycurrency = s.id_securitycurrency WHERE p.id_portfolio = ?1 AND s.currency <> ?2 
Currencypair.getHoldCashaccountOutDatetedCurrencypairs=SELECT cp.*, sc.* FROM securitycurrency sc JOIN (SELECT cp.id_securitycurrency FROM transaction t JOIN portfolio p ON p.id_tenant = t.id_tenant JOIN securitycashaccount sc ON t.id_cash_account = sc.id_securitycash_account AND sc.id_portfolio = p.id_portfolio JOIN cashaccount c ON c.id_securitycash_account = sc.id_securitycash_account JOIN currencypair cp ON cp.from_currency = c.currency AND cp.to_currency = p.currency JOIN historyquote h ON h.id_securitycurrency = cp.id_securitycurrency AND h.date = t.tt_date JOIN hold_cashaccount_deposit hcd ON hcd.from_hold_date = h.date AND hcd.id_securitycash_account = c.id_securitycash_account WHERE t.transaction_type <= 1 AND c.currency <> p.currency AND hcd.valid_timestamp < h.create_modify_time UNION SELECT cp.id_securitycurrency FROM transaction t JOIN tenant te ON t.id_tenant = te.id_tenant JOIN portfolio p ON p.id_tenant = t.id_tenant JOIN securitycashaccount sc ON t.id_cash_account = sc.id_securitycash_account AND sc.id_portfolio = p.id_portfolio JOIN cashaccount c ON c.id_securitycash_account = sc.id_securitycash_account JOIN currencypair cp ON cp.from_currency = c.currency AND cp.to_currency = te.currency JOIN historyquote h ON h.id_securitycurrency = cp.id_securitycurrency AND h.date = t.tt_date JOIN hold_cashaccount_deposit hcd ON hcd.from_hold_date = h.date AND hcd.id_securitycash_account = c.id_securitycash_account WHERE t.transaction_type <= 1 AND c.currency <> te.currency AND hcd.valid_timestamp < h.create_modify_time) AS t1 ON sc.id_securitycurrency = t1.id_securitycurrency JOIN currencypair cp ON sc.id_securitycurrency = cp.id_securitycurrency
Currencypair.getAllIdOfEmptyHistorqute=SELECT c.id_securitycurrency FROM securitycurrency sc JOIN currencypair c ON sc.id_securitycurrency = c.id_securitycurrency LEFT JOIN historyquote h ON c.id_securitycurrency = h.id_securitycurrency WHERE h.id_securitycurrency IS NULL AND sc.retry_history_load < (SELECT g.property_int FROM globalparameters g WHERE g.property_name = 'gt.history.retry')
Currencypair.findByFromCurrencyAndToCurrencyOrToCurrencyAndFromCurrency=SELECT c.*, sc.* FROM currencypair c JOIN securitycurrency sc ON c.id_securitycurrency = sc.id_securitycurrency WHERE c.from_currency = :c1 AND c.to_currency = :c2 OR c.from_currency = :c2  AND c.to_currency = :c1
Currencypair.getPairsByFromAndToCurrency=SELECT c.*, sc.* FROM currencypair c JOIN securitycurrency sc ON c.id_securitycurrency = sc.id_securitycurrency WHERE CONCAT(c.from_currency, c.to_currency) IN (?1)
Currencypair.countCurrencyGroupByCurrency=SELECT a.currency AS currency, SUM(a.usedInPairs) AS usedInPairs FROM (SELECT c.from_currency AS currency, COUNT(*) AS usedInPairs FROM currencypair c WHERE c.from_currency IN (?1) GROUP BY c.from_currency UNION ALL SELECT c.to_currency AS currency, COUNT(*) AS usedInPairs FROM currencypair c WHERE c.to_currency IN (?1) GROUP BY c.to_currency) AS a GROUP BY a.currency ORDER BY usedInPairs DESC 
Currencypair.getMaxHistoryquote=SELECT c as securityCurrency, MAX(h.date) AS date FROM Currencypair c JOIN c.historyquoteList h WHERE c.retryHistoryLoad < ?1 AND c.idConnectorHistory IS NOT NULL GROUP BY c.idSecuritycurrency 

Dividend.getDivdendForSecurityHoldingByIdTenant=SELECT hss.id_portfolio AS idPortfolio, hss.id_securitycash_account AS idSecurityaccount, s.id_securitycurrency AS idSecuritycurrency, hss.holdings, d.ex_date AS exDate, d.pay_date AS payDate, d.currency, d.amount FROM hold_securityaccount_security hss JOIN security s ON hss.id_securitycurrency = s.id_securitycurrency JOIN assetclass a ON a.id_asset_class = s.id_asset_class JOIN dividend d ON d.id_securitycurrency = s.id_securitycurrency WHERE a.category_type = 0 AND hss.from_hold_date <= d.ex_date AND (d.ex_date <= hss.to_hold_date OR hss.to_hold_date IS NULL) AND hss.id_tenant = ?1 ORDER BY hss.id_portfolio, hss.id_securitycash_account, s.id_securitycurrency 
Dividend.getIdSecurityForPeriodicallyUpdate=SELECT s.id_securitycurrency FROM security s WHERE CURRENT_DATE() > (SELECT DATE_ADD(MAX(d.ex_date), INTERVAL 360 / s.dist_frequency + ?1 DAY) FROM dividend d WHERE s.id_securitycurrency = d.id_securitycurrency) AND CURRENT_DATE() > s.div_earliest_next_check AND s.id_connector_dividend IS NOT NULL AND s.retry_dividend_load < ?2 UNION SELECT s.id_securitycurrency FROM security s LEFT JOIN dividend d ON s.id_securitycurrency = d.id_securitycurrency WHERE s.id_connector_dividend IS NOT NULL AND d.id_securitycurrency IS NULL AND s.retry_dividend_load < ?2 
Dividend.getIdSecuritySplitAfterDividendWhenAdjusted=SELECT d.id_securitycurrency FROM dividend d JOIN securitysplit ss ON d.id_securitycurrency = ss.id_securitycurrency JOIN security s ON s.id_securitycurrency = d.id_securitycurrency WHERE s.id_connector_dividend IN (?1) AND d.id_securitycurrency IN (?2) GROUP BY d.id_securitycurrency HAVING MAX(ss.split_date) >= MAX(d.ex_date)  

Historyquote.findByIdSecurityaccountAndIdSecurityFoCuHistoryquotes=SELECT h.date, cp.from_currency, h.close FROM portfolio p, transaction t, securitycurrency sc, securitycashaccount sca, currencypair cp, security s, historyquote h WHERE p.id_portfolio = sca.id_portfolio AND sca.id_securitycash_account = t.id_security_account AND t.id_securitycurrency = sc.id_securitycurrency AND s.id_securitycurrency = sc.id_securitycurrency AND cp.from_currency = s.currency AND cp.to_currency = p.currency AND cp.id_securitycurrency = h.id_securitycurrency AND t.tt_date = h.date AND sca.id_securitycash_account = ?1 AND sc.id_securitycurrency = ?2
Historyquote.findByIdTenantAndIdSecurityFoCuHistoryquotes=SELECT h.date, cp.from_currency, h.close FROM tenant e, portfolio p, securitycashaccount sca, transaction t, securitycurrency sc, currencypair cp, security s, historyquote h WHERE e.id_tenant = p.id_tenant AND p.id_portfolio = sca.id_portfolio AND sca.id_securitycash_account = t.id_security_account AND t.id_securitycurrency = sc.id_securitycurrency AND s.id_securitycurrency = sc.id_securitycurrency AND cp.from_currency = s.currency AND cp.to_currency = e.currency AND cp.id_securitycurrency = h.id_securitycurrency AND t.tt_date = h.date AND e.id_tenant = ?1 AND sc.id_securitycurrency = ?2
Historyquote.findByIdPortfolioAndIdSecurityFoCuHistoryquotes=SELECT h.date, cp.from_currency, h.close FROM portfolio p, securitycashaccount ac, securitycurrency sc, security s, transaction t, currencypair cp, historyquote h where p.id_portfolio = ac.id_portfolio AND ac.id_securitycash_account = t.id_security_account AND sc.id_securitycurrency = t.id_securitycurrency  AND sc.id_securitycurrency = s.id_securitycurrency AND cp.from_currency = s.currency AND cp.to_currency = p.currency AND cp.id_securitycurrency = h.id_securitycurrency AND tt_date = h.date AND p.id_portfolio = ?1 AND sc.id_securitycurrency = ?2
Historyquote.getHistoryquotesForAllForeignTransactionsByIdPortfolio=SELECT h.date, cp.from_currency, h.close FROM portfolio p JOIN securitycashaccount s ON p.id_portfolio = s.id_portfolio JOIN cashaccount c ON s.id_securitycash_account = c.id_securitycash_account JOIN transaction t ON c.id_securitycash_account = t.id_cash_account JOIN currencypair cp ON cp.to_currency = p.currency JOIN historyquote h ON cp.id_securitycurrency = h.id_securitycurrency AND t.tt_date = h.date WHERE p.id_portfolio = ?1 AND c.currency != p.currency AND cp.from_currency = c.currency
Historyquote.getHistoryquotesForAllForeignTransactionsByIdTenant=SELECT h.date, cp.from_currency, h.close FROM tenant te, portfolio p, securitycashaccount s, cashaccount c, transaction t, currencypair cp, historyquote h where te.id_tenant = ?1 AND te.id_tenant = p.id_tenant AND p.id_portfolio = s.id_portfolio AND s.id_securitycash_account = c.id_securitycash_account AND c.currency != te.currency  AND c.id_securitycash_account = t.id_cash_account AND cp.to_currency=te.currency AND cp.from_currency = c.currency AND cp.id_securitycurrency = h.id_securitycurrency AND t.tt_date = h.date
Historyquote.getHistoryquotesForAllForeignTransactionsByIdSecuritycashAccount=SELECT h.date, cp.from_currency, h.close FROM portfolio p, transaction t, securitycurrency sc, securitycashaccount sca, currencypair cp, security s, historyquote h WHERE p.id_portfolio = sca.id_portfolio AND sca.id_securitycash_account = t.id_security_account AND t.id_securitycurrency = sc.id_securitycurrency AND s.id_securitycurrency = sc.id_securitycurrency AND cp.from_currency = s.currency AND cp.to_currency = p.currency AND cp.id_securitycurrency = h.id_securitycurrency AND t.tt_date = h.date AND sca.id_securitycash_account = ?1
Historyquote.getSecuritycurrencyHistoryEndOfYearsByIdTenant=SELECT h1.* FROM historyquote h1,( SELECT Year(h.date) as year, h.id_securitycurrency, max(h.date) as maxdate FROM historyquote h, ( (SELECT DISTINCT c.id_securitycurrency FROM currencypair c, tenant t, portfolio p, securitycurrency sc where t.id_tenant = ?1 AND c.from_currency = p.currency AND c.to_currency = t.currency AND t.id_tenant = p.id_tenant AND c.id_securitycurrency = sc.id_securitycurrency) UNION (SELECT c1.id_securitycurrency FROM currencypair c1, (SELECT DISTINCT s.currency as fromcurrency, e.currency as tocurrency FROM tenant e, portfolio p, securitycashaccount sc, transaction t, security s WHERE e.id_tenant = ?1 AND e.id_tenant = p.id_portfolio AND p.id_portfolio = sc.id_portfolio AND sc.id_securitycash_account = t.id_security_account AND t.id_securitycurrency = s.id_securitycurrency) c2 WHERE c1.from_currency = c2.fromcurrency AND c1.to_currency = c2.tocurrency) UNION (SELECT DISTINCT c.id_securitycurrency FROM tenant e, currencypair c, portfolio p, cashaccount a, securitycashaccount s WHERE e.id_tenant = ?1 AND e.id_tenant = p.id_tenant AND c.from_currency = a.currency AND c.to_currency = e.currency AND p.id_portfolio = s.id_portfolio AND a.id_securitycash_account = s.id_securitycash_account) UNION (SELECT DISTINCT t.id_securitycurrency FROM portfolio p, securitycashaccount sa, securityaccount sc, transaction t WHERE p.id_tenant = ?1 AND p.id_portfolio = sa.id_portfolio AND sa.id_securitycash_account = sc.id_securitycash_account AND sc.id_securitycash_account = t.id_security_account AND t.id_securitycurrency IS NOT NULL) ) e WHERE h.id_securitycurrency = e.id_securitycurrency GROUP BY h.id_securitycurrency, year) h2 WHERE h1.id_securitycurrency = h2.id_securitycurrency AND h1.date = h2.maxdate
Historyquote.getHistoryquoteCurrenciesForDividendsByIdTenantAndMainCurrency=SELECT DISTINCT h1.histdate, cp1.from_currency, hq.close FROM historyquote hq, currencypair cp1, (SELECT c.currency fromcurrency, DATE(t.transaction_time) as histdate FROM portfolio p, securitycashaccount s, cashaccount c, transaction t WHERE p.id_tenant = ?1 AND p.id_portfolio = s.id_portfolio AND c.id_securitycash_account = s.id_securitycash_account AND c.currency != ?2 AND t.id_cash_account = c.id_securitycash_account AND t.transaction_type = 6) as h1 WHERE hq.date = h1.histdate AND cp1.from_currency = h1.fromcurrency AND cp1.to_currency = ?2 AND hq.id_securitycurrency = cp1.id_securitycurrency
Historyquote.getHistoryquoteCurrenciesForBuyAndSellByIdTenantAndMainCurrency=SELECT h1.histdate, cp1.from_currency, hq.close FROM historyquote hq, currencypair cp1, (SELECT c.currency fromcurrency, t.tt_date as histdate FROM portfolio p, securitycashaccount s, cashaccount c, transaction t WHERE p.id_tenant = ?1 AND p.id_portfolio = s.id_portfolio AND c.id_securitycash_account = s.id_securitycash_account AND c.currency != ?2 AND t.id_cash_account = c.id_securitycash_account AND t.transaction_type >= 4 AND t.transaction_type <= 5) as h1 WHERE hq.date = h1.histdate AND cp1.from_currency = h1.fromcurrency AND cp1.to_currency = ?2 AND hq.id_securitycurrency = cp1.id_securitycurrency
Historyquote.getHistoryquoteCurrenciesForIntrFeeBuySellDivByIdTenantAndMainCurrency=SELECT h1.histdate, cp1.from_currency, hq.close FROM historyquote hq, currencypair cp1, (SELECT c.currency fromcurrency, t.tt_date as histdate FROM portfolio p, securitycashaccount s, cashaccount c, transaction t WHERE p.id_tenant = ?1 AND p.id_portfolio = s.id_portfolio AND c.id_securitycash_account = s.id_securitycash_account AND c.currency != ?2 AND t.id_cash_account = c.id_securitycash_account AND t.transaction_type >= 2 AND t.transaction_type <= 6) as h1 WHERE hq.date = h1.histdate AND cp1.from_currency = h1.fromcurrency AND cp1.to_currency = ?2 AND hq.id_securitycurrency = cp1.id_securitycurrency

Historyquote.getYoungestFeedHistorquoteForSecuritycurrencyByWatchlist=SELECT h.* FROM historyquote h JOIN (SELECT hq.id_securitycurrency, MAX(hq.date) AS maxDate FROM watchlist wl JOIN watchlist_sec_cur w ON wl.id_watchlist = w.id_watchlist JOIN historyquote hq ON w.id_securitycurrency = hq.id_securitycurrency WHERE wl.id_watchlist = ?1 AND wl.id_tenant = ?2 GROUP BY hq.id_securitycurrency) as x ON h.id_securitycurrency = x.id_securitycurrency AND h.date = maxDate ORDER BY h.id_securitycurrency ASC 
Historyquote.getYoungestHistorquoteForSecuritycurrencyByWatchlist=SELECT h.id_securitycurrency AS idSecuritycurrency, h.date AS date, h.close AS close FROM historyquote h JOIN (SELECT hq.id_securitycurrency, MAX(hq.date) AS maxDate FROM historyquote hq, watchlist_sec_cur w WHERE w.id_watchlist = ?1 AND w.id_securitycurrency = hq.id_securitycurrency GROUP BY hq.id_securitycurrency) as x ON h.id_securitycurrency = x.id_securitycurrency AND h.date = maxDate
Historyquote.countSecuritycurrencyForHistoryquoteAccess=SELECT SUM(found) as found FROM (SELECT count(*) found FROM transaction t WHERE t.id_tenant = ?1 AND t.id_securitycurrency = ?2 UNION ALL SELECT count(*) found FROM watchlist w, watchlist_sec_cur ws WHERE w.id_tenant = ?1 AND w.id_watchlist = ws.id_watchlist AND ws.id_securitycurrency = ?2) t_union
Historyquote.getUsedCurrencyHistoryquotesByIdTenantAndDate=SELECT DISTINCT h.date, c.from_currency, h.close FROM historyquote h JOIN currencypair c ON h.id_securitycurrency = c.id_securitycurrency, tenant t JOIN portfolio p ON t.id_tenant = p.id_tenant, (SELECT c1.id_securitycurrency FROM currencypair c1, securitycurrency sc, (SELECT DISTINCT s.currency as fromcurrency, e.currency as tocurrency FROM tenant e, portfolio p, securitycashaccount sc, transaction t, security s WHERE e.id_tenant = 7 AND e.id_tenant = p.id_portfolio AND p.id_portfolio = sc.id_portfolio AND sc.id_securitycash_account = t.id_security_account AND t.id_securitycurrency = s.id_securitycurrency) c2 WHERE c1.from_currency = fromcurrency AND c1.to_currency = tocurrency AND c1.id_securitycurrency = sc.id_securitycurrency UNION (SELECT DISTINCT c.id_securitycurrency FROM tenant e, currencypair c, portfolio p, cashaccount a, securitycashaccount s WHERE e.id_tenant = ?1  AND e.id_tenant = p.id_tenant AND c.from_currency = a.currency AND c.to_currency = e.currency AND p.id_portfolio = s.id_portfolio AND a.id_securitycash_account = s.id_securitycash_account) UNION (SELECT DISTINCT s.id_securitycurrency FROM transaction t, portfolio p, securitycashaccount sc, cashaccount ca, securitycurrency s  WHERE p.id_tenant = ?1 AND p.id_portfolio = sc.id_portfolio  AND sc.id_securitycash_account = ca.id_securitycash_account AND t.id_cash_account = ca.id_securitycash_account  AND t.id_currency_pair = s.id_securitycurrency)) AS cp WHERE h.date = ?2 AND h.id_securitycurrency = cp.id_securitycurrency AND t.id_tenant = ?1 AND (c.to_currency = t.currency OR c.to_currency = p.currency)
Historyquote.getClosedAndMissingHistoryquoteByIdSecurity=SELECT tdp.trading_date AS date, hq.close FROM security s JOIN trading_days_plus tdp LEFT JOIN trading_days_minus tdm ON tdp.trading_date = tdm.trading_date_minus AND tdm.id_stockexchange = s.id_stockexchange JOIN stockexchange se ON se.id_stockexchange = s.id_stockexchange LEFT JOIN historyquote hq ON s.id_securitycurrency = hq.id_securitycurrency AND tdp.trading_date = hq.date WHERE tdm.trading_date_minus IS NULL AND s.active_from_date <= tdp.trading_date AND tdp.trading_date <= LEAST(s.active_to_date, IFNULL(se.max_calendar_upd_date, NOW() - INTERVAL 1 DAY)) AND s.id_securitycurrency = ?1 ORDER BY tdp.trading_date; 
Historyquote.getMissingsDaysCountByIdSecurity=SELECT q1.*, q2.toManyAsCalendar, q2.quoteSaturday, q2.quoteSunday, q3.connectorCreated, q3.manualImported, q3.filledLinear, q3.calculated, q3.userModified FROM (SELECT s.id_securitycurrency, MIN(hq.date) AS minDate, SUM(IF(tdp.trading_date < (SELECT MIN(hq1.date) FROM historyquote hq1 WHERE hq1.id_securitycurrency = ?1) AND hq.date IS NULL, 1, 0) ) AS missingStart, MAX(hq.date) maxDate, SUM(IF(tdp.trading_date > (SELECT MAX(hq1.date) FROM historyquote hq1 WHERE hq1.id_securitycurrency = ?1) AND hq.date IS NULL, 1, 0)) AS missingEnd, SUM(IF(hq.date IS NULL, 1, 0)) AS totalMissing, count(*) AS expectedTotal, ROUND((1 - SUM(IF(hq.date IS NULL, 1, 0)) / count(*)) * 100, 2) AS qualityPercentage FROM security s JOIN trading_days_plus tdp LEFT JOIN trading_days_minus tdm ON tdp.trading_date = tdm.trading_date_minus AND tdm.id_stockexchange = s.id_stockexchange LEFT JOIN historyquote hq ON s.id_securitycurrency = hq.id_securitycurrency AND tdp.trading_date = hq.date WHERE tdm.trading_date_minus IS NULL AND s.id_securitycurrency = ?1 AND s.active_from_date <= tdp.trading_date AND s.id_tenant_private IS NULL AND tdp.trading_date <= LEAST(s.active_to_date, NOW() - INTERVAL 1 DAY)) AS q1 LEFT JOIN (SELECT s.id_securitycurrency, count(*) AS toManyAsCalendar, SUM(IF(DAYOFWEEK(hq.date) = 7, 1, 0)) AS quoteSaturday, SUM(IF(DAYOFWEEK(hq.date) = 1, 1, 0)) AS quoteSunday FROM security s JOIN historyquote hq ON s.id_securitycurrency = hq.id_securitycurrency LEFT JOIN trading_days_plus tdp ON tdp.trading_date = hq.date LEFT JOIN trading_days_minus tdm ON tdp.trading_date = tdm.trading_date_minus AND tdm.id_stockexchange = s.id_stockexchange WHERE (tdp.trading_date IS NULL OR tdm.trading_date_minus IS NOT NULL) AND s.active_from_date <= hq.date AND hq.date <= LEAST(s.active_to_date, NOW() - INTERVAL 1 DAY) AND s.id_securitycurrency = ?1 GROUP BY s.id_securitycurrency) AS q2 ON q1.id_securitycurrency = q2.id_securitycurrency JOIN (SELECT h.id_securitycurrency, SUM(IF(h.create_type = 0, 1, 0)) AS connectorCreated, SUM(IF(h.create_type = 2, 1, 0)) AS manualImported, SUM(IF(h.create_type = 3, 1, 0)) AS filledLinear, SUM(IF(h.create_type = 4, 1, 0)) AS calculated, SUM(IF(h.create_type = 5, 1, 0)) AS userModified FROM historyquote h WHERE h.id_securitycurrency = ?1) AS q3 ON q1.id_securitycurrency = q3.id_securitycurrency    
Historyquote.getMissingsDaysCountByIdCurrency=SELECTT q1.*, q2.toManyAsCalendar, q2.quoteSaturday, q2.quoteSunday, q3.connectorCreated, q3.manualImported, q3.filledLinear, q3.calculated, q3.userModified FROM (SELECT cp.id_securitycurrency, MIN(hq.date) AS minDate, SUM(IF(tdp.trading_date < (SELECT MIN(hq1.date) FROM historyquote hq1 WHERE hq1.id_securitycurrency = ?1) AND hq.date IS NULL, 1, 0) ) AS missingStart, MAX(hq.date) maxDate, SUM(IF(tdp.trading_date > (SELECT MAX(hq1.date) FROM historyquote hq1 WHERE hq1.id_securitycurrency = ?1) AND hq.date IS NULL, 1, 0)) AS missingEnd, SUM(IF(hq.date IS NULL, 1, 0)) AS totalMissing, count(*) AS expectedTotal, ROUND((1 - SUM(IF(hq.date IS NULL, 1, 0)) / count(*)) * 100, 2) AS qualityPercentage FROM currencypair cp JOIN trading_days_plus tdp LEFT JOIN historyquote hq ON cp.id_securitycurrency = hq.id_securitycurrency AND tdp.trading_date = hq.date WHERE cp.id_securitycurrency = ?1 AND tdp.trading_date <= NOW() - INTERVAL 1 DAY) AS q1 LEFT JOIN (SELECT hq.id_securitycurrency, count(*) AS toManyAsCalendar, SUM(IF(DAYOFWEEK(hq.date) = 7, 1, 0)) AS quoteSaturday, SUM(IF(DAYOFWEEK(hq.date) = 1, 1, 0)) AS quoteSunday FROM historyquote hq LEFT JOIN trading_days_plus tdp ON tdp.trading_date = hq.date WHERE tdp.trading_date IS NULL AND hq.date <= NOW() - INTERVAL 1 DAY AND hq.id_securitycurrency = ?1 GROUP BY hq.id_securitycurrency) AS q2 ON q1.id_securitycurrency = q2.id_securitycurrency JOIN (SELECT h.id_securitycurrency, SUM(IF(h.create_type = 0, 1, 0)) AS connectorCreated, SUM(IF(h.create_type = 2, 1, 0)) AS manualImported, SUM(IF(h.create_type = 3, 1, 0)) AS filledLinear, SUM(IF(h.create_type = 4, 1, 0)) AS calculated, SUM(IF(h.create_type = 5, 1, 0)) AS userModified FROM historyquote h WHERE h.id_securitycurrency = ?1) as q3 ON q1.id_securitycurrency = q3.id_securitycurrency  
Historyquote.getHistoryquoteFromDerivedLinksByIdSecurityAndDate=SELECT h.* FROM( SELECT h.* FROM security_derived_link sdl JOIN historyquote h ON sdl.id_link_securitycurrency = h.id_securitycurrency WHERE sdl.id_securitycurrency = ?1 AND h.date BETWEEN ?2 AND  ?3 UNION SELECT h.* FROM security s JOIN historyquote h ON s.id_link_securitycurrency = h.id_securitycurrency WHERE s.id_securitycurrency = ?1 AND h.date BETWEEN  ?2 AND ?3 ) AS h JOIN (SELECT h1.date, count(*) AS daycount FROM security_derived_link sdl JOIN historyquote h1 ON sdl.id_link_securitycurrency = h1.id_securitycurrency JOIN security s JOIN historyquote h3 ON s.id_link_securitycurrency = h3.id_securitycurrency AND h3.date = h1.date WHERE sdl.id_securitycurrency = ?1 AND s.id_securitycurrency = sdl.id_securitycurrency GROUP BY h1.date HAVING daycount = ?4) AS h1 ON h.date = h1.date ORDER BY h.date, h.id_securitycurrency  
Historyquote.getIdDateCloseByIdsAndDate=SELECT h.id_securitycurrency AS idSecuritycurrency, h.date AS date, h.close AS close FROM historyquote h WHERE h.id_securitycurrency IN (:ids) AND h.date = (SELECT MAX(hq.date) FROM historyquote hq WHERE h.id_securitycurrency = hq.id_securitycurrency AND hq.date <= :date GROUP BY hq.id_securitycurrency) UNION SELECT hp.id_securitycurrency AS idSecuritycurrency, DATE(:date) AS date, hp.price AS close FROM historyquote_period hp WHERE hp.id_securitycurrency IN (:ids) AND :date BETWEEN hp.from_date AND hp.to_date
Historyquote.getCertainOrOlderDayInHistorquoteForSecuritycurrencyByWatchlist=SELECT h.id_securitycurrency AS idSecuritycurrency, h.date AS date, h.close AS close FROM historyquote h JOIN (SELECT hq.id_securitycurrency, MAX(hq.date) AS maxDate FROM historyquote hq, watchlist_sec_cur w WHERE w.id_watchlist = ?1 AND w.id_securitycurrency = hq.id_securitycurrency AND hq.date <= ?2 GROUP BY hq.id_securitycurrency) as x ON h.id_securitycurrency = x.id_securitycurrency AND h.date = maxDate UNION SELECT hp.id_securitycurrency AS idSecuritycurrency, DATE(?2) AS date, hp.price AS close FROM historyquote_period hp JOIN watchlist_sec_cur w ON w.id_securitycurrency = hp.id_securitycurrency WHERE w.id_watchlist = ?1 AND ?2 BETWEEN hp.from_date AND hp.to_date 
Historyquote.findDateCloseByIdSecuritycurrencyAndCreateTypeFalseOrderByDateAsc=SELECT new grafioschtrader.dto.HistoryquoteDateClose(h.date, h.close) FROM Historyquote h WHERE h.idSecuritycurrency = ?1 AND h.createType != 1 ORDER BY h.date ASC
Historyquote.getMinMaxDateByIdSecuritycurrencyIds=SELECT h.id_securitycurrency idSecuritycurrency, MIN(h.date) minDate, MAX(h.date) maxDate FROM historyquote h WHERE h.id_securitycurrency IN (?1) GROUP BY h.id_securitycurrency ORDER BY h.id_securitycurrency 
Historyquote.getMissingEODForSecurityByUpdCalendarIndex=SELECT h1.date FROM historyquote h1, security s2 WHERE NOT EXISTS ( SELECT h2.date FROM historyquote h2 WHERE h1.date = h2.date AND h2.id_securitycurrency = ?2 ) AND h1.id_securitycurrency = ?1 AND s2.id_securitycurrency = ?2 AND h1.date >= s2.active_from_date ORDER BY h1.date

HistoryquotePeriod.getDateAndCloseByIdSecurity=SELECT * FROM (SELECT from_date AS date, price AS close FROM historyquote_period WHERE id_securitycurrency = ?1 UNION SELECT to_date AS date, price AS close FROM historyquote_period WHERE id_securitycurrency = ?1) AS x ORDER BY x.date 
HistoryquotePeriod.updatLastPrice=UPDATE securitycurrency sc JOIN security s ON s.id_securitycurrency = sc.id_securitycurrency JOIN historyquote_period hp ON sc.id_securitycurrency = hp.id_securitycurrency SET sc.s_last = hp.price, sc.s_timestamp = UTC_TIMESTAMP() WHERE CURDATE() BETWEEN s.active_from_date AND s.active_to_date AND CURDATE() BETWEEN hp.from_date AND hp.to_date 


HoldCashaccountBalance.getCashaccountBalanceByTenant=SELECT t.id_cash_account as idCashaccount, p.id_portfolio as idPortfolio, p.currency as portfolioCurrency, c.currency as accountCurrency, t.tt_date as fromDate, sum(IF(t.transaction_type <= 1, cashaccount_amount, 0)) AS withdrawlDeposit, sum(IF(t.transaction_type = 2, cashaccount_amount, 0)) AS interestCashaccount , sum(IF(t.transaction_type = 3, cashaccount_amount, 0)) AS fee, sum(IF(t.transaction_type BETWEEN 4 AND 5, cashaccount_amount, 0)) AS accumulateReduce, sum(IF(t.transaction_type = 6, cashaccount_amount, 0)) AS dividend, sum(cashaccount_amount) total FROM portfolio p JOIN securitycashaccount sc ON p.id_portfolio = sc.id_portfolio JOIN cashaccount c ON sc.id_securitycash_account = c.id_securitycash_account JOIN transaction t ON sc.id_securitycash_account = t.id_cash_account WHERE p.id_tenant = ?1 GROUP BY t.id_cash_account, t.tt_date ORDER BY t.id_cash_account, t.tt_date     
HoldCashaccountBalance.getCashaccountBalanceByCashaccountAndDate=SELECT t.id_cash_account as idCashaccount, p.id_portfolio as idPortfolio, p.currency as portfolioCurrency, c.currency as accountCurrency, t.tt_date as fromDate, sum(IF(t.transaction_type <= 1, cashaccount_amount, 0)) AS withdrawlDeposit , sum(IF(t.transaction_type = 2, cashaccount_amount, 0)) AS interestCashaccount , sum(IF(t.transaction_type = 3, cashaccount_amount, 0)) AS fee, sum(IF(t.transaction_type BETWEEN 4 AND 5, cashaccount_amount, 0)) AS accumulateReduce, sum(IF(t.transaction_type = 6, cashaccount_amount, 0)) AS dividend, sum(cashaccount_amount) total FROM portfolio p JOIN securitycashaccount sc ON p.id_portfolio = sc.id_portfolio JOIN cashaccount c ON sc.id_securitycash_account = c.id_securitycash_account JOIN transaction t ON sc.id_securitycash_account = t.id_cash_account WHERE c.id_securitycash_account = ?1 AND t.tt_date >= ?2 GROUP BY t.tt_date 
HoldCashaccountBalance.getCashaccountBalanceMaxFromDateByCashaccount=SELECT hcb.* FROM hold_cashaccount_balance hcb JOIN (SELECT id_securitycash_account, MAX(from_hold_date) AS maxFromDate FROM hold_cashaccount_balance WHERE id_securitycash_account = ?1 GROUP BY id_securitycash_account) hcbm ON hcb.id_securitycash_account = hcbm.id_securitycash_account AND hcb.from_hold_date = maxFromDate

HoldCashaccountDeposit.getCashaccountForeignExChangeRateByIdTenant=SELECT h.date, cp.from_currency as fromCurrency, p.currency as toCurrency, h.close FROM portfolio p, securitycashaccount s, cashaccount c, transaction t, currencypair cp, historyquote h WHERE p.id_portfolio = s.id_portfolio AND s.id_securitycash_account = c.id_securitycash_account AND c.currency != p.currency AND c.id_securitycash_account = t.id_cash_account AND cp.to_currency=p.currency AND cp.from_currency = c.currency AND cp.id_securitycurrency = h.id_securitycurrency AND t.tt_date = h.date AND t.transaction_type <=1 AND p.id_tenant = ?1 UNION SELECT h.date, cp.from_currency as fromCurrency, te.currency as toCurrency, h.close FROM tenant te, portfolio p, securitycashaccount s, cashaccount c, transaction t, currencypair cp, historyquote h where te.id_tenant = ?1 AND te.id_tenant = p.id_tenant AND p.id_portfolio = s.id_portfolio AND s.id_securitycash_account = c.id_securitycash_account AND c.currency != te.currency AND c.id_securitycash_account = t.id_cash_account AND cp.to_currency=te.currency AND cp.from_currency = c.currency AND cp.id_securitycurrency = h.id_securitycurrency AND t.tt_date = h.date AND t.transaction_type <=1
HoldCashaccountDeposit.getLastBeforeDateByCashaccount=SELECT h1.*, h2.fromHoldDate FROM hold_cashaccount_deposit h1 JOIN (SELECT id_securitycash_account, MAX(from_hold_date) AS fromHoldDate FROM hold_cashaccount_deposit WHERE id_securitycash_account = ?1 AND from_hold_date < ?2) AS h2 ON h1.id_securitycash_account = h2.id_securitycash_account AND h1.from_hold_date = h2.fromHoldDate 
HoldCashaccountDeposit.getCashaccountForeignExChangeRate=SELECT DISTINCT h.date, cp.from_currency as fromCurrency, cp.to_currency as toCurrency, h.close FROM transaction t JOIN (SELECT t.id_cash_account, t.transaction_time, cp.id_securitycurrency FROM transaction t JOIN portfolio p ON p.id_tenant = t.id_tenant JOIN securitycashaccount sc ON t.id_cash_account = sc.id_securitycash_account AND sc.id_portfolio = p.id_portfolio JOIN cashaccount c ON c.id_securitycash_account = sc.id_securitycash_account JOIN currencypair cp ON cp.from_currency = c.currency AND cp.to_currency = p.currency JOIN historyquote h ON h.id_securitycurrency = cp.id_securitycurrency AND h.date = t.tt_date JOIN hold_cashaccount_deposit hcd ON hcd.from_hold_date = h.date AND hcd.id_securitycash_account = c.id_securitycash_account WHERE t.transaction_type <= 1 AND c.currency <> p.currency AND hcd.valid_timestamp < h.create_modify_time UNION SELECT t.id_cash_account, t.transaction_time, cp.id_securitycurrency FROM transaction t JOIN tenant te ON t.id_tenant = te.id_tenant JOIN portfolio p ON p.id_tenant = t.id_tenant JOIN securitycashaccount sc ON t.id_cash_account = sc.id_securitycash_account AND sc.id_portfolio = p.id_portfolio JOIN cashaccount c ON c.id_securitycash_account = sc.id_securitycash_account JOIN currencypair cp ON cp.from_currency = c.currency AND cp.to_currency = te.currency JOIN historyquote h ON h.id_securitycurrency = cp.id_securitycurrency AND h.date = t.tt_date JOIN hold_cashaccount_deposit hcd ON hcd.from_hold_date = h.date AND hcd.id_securitycash_account = c.id_securitycash_account WHERE t.transaction_type <= 1 AND c.currency <> te.currency AND hcd.valid_timestamp < h.create_modify_time) AS t1 ON t.id_cash_account = t1.id_cash_account JOIN currencypair cp ON cp.id_securitycurrency = t1.id_securitycurrency JOIN historyquote h ON tt_date = h.date AND h.id_securitycurrency = t1.id_securitycurrency WHERE t.transaction_time >= t1.transaction_time AND t.transaction_type <=1
HoldCashaccountDeposit.getPrevHoldingRecords=SELECT hcd.* FROM hold_cashaccount_deposit hcd JOIN (SELECT hcd.id_securitycash_account, max(hcd.from_hold_date) AS maxDate FROM hold_cashaccount_deposit hcd JOIN (SELECT t.id_cash_account, t.tt_date FROM transaction t JOIN portfolio p ON p.id_tenant = t.id_tenant JOIN securitycashaccount sc ON t.id_cash_account = sc.id_securitycash_account AND sc.id_portfolio = p.id_portfolio JOIN cashaccount c ON c.id_securitycash_account = sc.id_securitycash_account JOIN currencypair cp ON cp.from_currency = c.currency AND cp.to_currency = p.currency JOIN historyquote h ON h.id_securitycurrency = cp.id_securitycurrency AND h.date = t.tt_date JOIN hold_cashaccount_deposit hcd ON hcd.from_hold_date = h.date AND hcd.id_securitycash_account = c.id_securitycash_account WHERE t.transaction_type <= 1 AND c.currency <> p.currency AND hcd.valid_timestamp < h.create_modify_time UNION SELECT t.id_cash_account, t.tt_date FROM transaction t JOIN tenant te ON t.id_tenant = te.id_tenant JOIN portfolio p ON p.id_tenant = t.id_tenant JOIN securitycashaccount sc ON t.id_cash_account = sc.id_securitycash_account AND sc.id_portfolio = p.id_portfolio JOIN cashaccount c ON c.id_securitycash_account = sc.id_securitycash_account JOIN currencypair cp ON cp.from_currency = c.currency AND cp.to_currency = te.currency JOIN historyquote h ON h.id_securitycurrency = cp.id_securitycurrency AND h.date = t.tt_date JOIN hold_cashaccount_deposit hcd ON hcd.from_hold_date = h.date AND hcd.id_securitycash_account = c.id_securitycash_account WHERE t.transaction_type <= 1 AND c.currency <> te.currency AND hcd.valid_timestamp < h.create_modify_time) AS t1 ON hcd.id_securitycash_account = t1.id_cash_account AND hcd.to_hold_date < t1.tt_date GROUP BY hcd.id_securitycash_account) AS t2 ON hcd.id_securitycash_account = t2.id_securitycash_account AND hcd.from_hold_date = t2.maxDate

HoldSecurityaccountSecurity.getBuySellTransWithSecuritySplitByIdSecurityaccount=(SELECT t.id_securitycurrency as idSecuritycurrency, t.transaction_time as tsDate, SUM(IF(t.transaction_type = 4, 1, -1) * t.units) as factorUnits, CAST(NULL AS int) as idTransactionMargin, s.currency as currency FROM transaction t JOIN security s ON t.id_securitycurrency = s.id_securitycurrency JOIN assetclass a ON s.id_asset_class = a.id_asset_class WHERE t.transaction_type >= 4 AND t.transaction_type <= 5 AND a.spec_invest_instrument != 4 AND a.category_type != 8 AND t.id_security_account = ?1 GROUP BY t.id_securitycurrency, t.tt_date) UNION (SELECT DISTINCT sp.id_securitycurrency as idSecuritycurrency, sp.split_date as tsDate, sp.to_factor / sp.from_factor as factorUnits, null, null as currency FROM transaction t, securitysplit sp WHERE t.id_securitycurrency = sp.id_securitycurrency AND t.transaction_type >= 4 AND t.transaction_type <= 5 AND t.id_security_account = ?1) UNION (SELECT t.id_securitycurrency as idSecuritycurrency, t.transaction_time as tsDate, IF(t.transaction_type = 4, 1, -1) * t.units * t.asset_investment_value_2 as factorUnits, t.id_transaction as idTransactionMargin, s.currency as currency FROM transaction t JOIN security s ON t.id_securitycurrency = s.id_securitycurrency JOIN assetclass a ON s.id_asset_class = a.id_asset_class WHERE t.transaction_type >= 4 AND t.transaction_type <= 5 AND (a.spec_invest_instrument = 4 OR a.category_type = 8) AND t.id_security_account = ?1 ORDER BY t.transaction_time) ORDER BY idSecuritycurrency, tsdate 
HoldSecurityaccountSecurity.getBuySellTransWithSecuritySplitByIdSecurityaccountAndSecurity=(SELECT t.id_transaction as idTransaction, t.id_securitycurrency as idSecuritycurrency, t.transaction_time as tsDate, SUM(IF(t.transaction_type = 4, 1, -1) * t.units) as factorUnits, CAST(NULL AS int) as idTransactionMargin, s.currency as currency FROM transaction t JOIN security s ON t.id_securitycurrency = s.id_securitycurrency JOIN assetclass a ON s.id_asset_class = a.id_asset_class WHERE t.transaction_type >= 4 AND t.transaction_type <= 5 AND t.id_security_account = ?1 AND t.id_securitycurrency = ?2 GROUP BY t.tt_date) UNION (SELECT null as idTransaction, sp.id_securitycurrency as idSecuritycurrency, sp.split_date as tsDate, sp.to_factor / sp.from_factor as factorUnits, null, null as currency FROM securitysplit sp WHERE sp.id_securitycurrency = ?2) ORDER BY tsdate
HoldSecurityaccountSecurity.getBuySellTransWithSecuritySplitByIdSecurityaccountAndSecurityMargin=(SELECT t.id_transaction as idTransaction, t.id_securitycurrency as idSecuritycurrency, t.transaction_time as tsDate, IF(t.transaction_type = 4, 1, -1) * t.units * t.asset_investment_value_2 as factorUnits, t.id_transaction as idTransactionMargin, s.currency as currency FROM transaction t JOIN security s ON t.id_securitycurrency = s.id_securitycurrency JOIN assetclass a ON s.id_asset_class = a.id_asset_class WHERE t.transaction_type >= 4 AND t.transaction_type <= 5 AND t.id_security_account = ?1 AND t.id_securitycurrency = ?2 ORDER BY t.transaction_time) UNION (SELECT null as idTransaction, sp.id_securitycurrency as idSecuritycurrency, sp.split_date as tsDate, sp.to_factor / sp.from_factor as factorUnits, null, null as currency FROM securitysplit sp WHERE sp.id_securitycurrency = ?2) ORDER BY tsdate  
HoldSecurityaccountSecurity.getMissingQuotesForSecurityByTenantAndPeriod=SELECT tdp.trading_date AS tradingDate, s.id_securitycurrency AS idSecuritycurrency FROM security s JOIN trading_days_plus tdp LEFT JOIN trading_days_minus tdm ON tdp.trading_date = tdm.trading_date_minus AND tdm.id_stockexchange = s.id_stockexchange LEFT JOIN historyquote hq ON s.id_securitycurrency = hq.id_securitycurrency AND tdp.trading_date = hq.date JOIN hold_securityaccount_security hss ON hss.id_securitycurrency = s.id_securitycurrency AND tdp.trading_date >= hss.from_hold_date AND (tdp.trading_date <= hss.to_hold_date OR hss.to_hold_date IS NULL) JOIN stockexchange se ON se.id_stockexchange = s.id_stockexchange WHERE tdm.trading_date_minus IS NULL AND hq.date IS NULL AND se.no_market_value = 0 AND s.active_from_date <= tdp.trading_date AND tdp.trading_date <= LEAST(s.active_to_date, IFNULL(se.max_calendar_upd_date, NOW() - INTERVAL 1 DAY)) AND hss.id_tenant = ?1 AND tdp.trading_date BETWEEN ?2 AND ?3 ORDER BY tdp.trading_date, s.id_securitycurrency
HoldSecurityaccountSecurity.getByISINAndSecurityAccountAndDate=SELECT hss.* FROM hold_securityaccount_security hss JOIN security s ON hss.id_securitycurrency = s.id_securitycurrency WHERE s.isin = ?1 AND hss.id_securitycash_account = ?2 AND hss.from_hold_date <= ?3 AND (hss.to_hold_date IS NULL OR ?3 <= hss.to_hold_date)
HoldSecurityaccountSecurity.getMissingsQuoteDaysByTenant=SELECT DISTINCT tdp.trading_date FROM security s JOIN trading_days_plus tdp LEFT JOIN trading_days_minus tdm ON tdp.trading_date = tdm.trading_date_minus AND tdm.id_stockexchange = s.id_stockexchange LEFT JOIN historyquote hq ON s.id_securitycurrency = hq.id_securitycurrency AND tdp.trading_date = hq.date JOIN hold_securityaccount_security hss ON hss.id_securitycurrency = s.id_securitycurrency AND tdp.trading_date >= hss.from_hold_date AND (tdp.trading_date <= hss.to_hold_date OR hss.to_hold_date IS NULL) JOIN stockexchange se ON se.id_stockexchange = s.id_stockexchange WHERE tdm.trading_date_minus IS NULL AND hq.date IS NULL AND se.no_market_value = 0 AND s.active_from_date <= tdp.trading_date AND tdp.trading_date <= LEAST(s.active_to_date, IFNULL(se.max_calendar_upd_date, NOW() - INTERVAL 1 DAY)) AND hss.id_tenant = ?1 ORDER BY tdp.trading_date
HoldSecurityaccountSecurity.getMissingsQuoteDaysByPortfolio=SELECT DISTINCT tdp.trading_date FROM security s JOIN trading_days_plus tdp LEFT JOIN trading_days_minus tdm ON tdp.trading_date = tdm.trading_date_minus AND tdm.id_stockexchange = s.id_stockexchange LEFT JOIN historyquote hq ON s.id_securitycurrency = hq.id_securitycurrency AND tdp.trading_date = hq.date JOIN hold_securityaccount_security hss ON hss.id_securitycurrency = s.id_securitycurrency AND tdp.trading_date >= hss.from_hold_date AND (tdp.trading_date <= hss.to_hold_date OR hss.to_hold_date IS NULL) JOIN stockexchange se ON se.id_stockexchange = s.id_stockexchange WHERE tdm.trading_date_minus IS NULL AND hq.date IS NULL AND se.no_market_value = 0 AND s.active_from_date <= tdp.trading_date AND tdp.trading_date <= LEAST(s.active_to_date, IFNULL(se.max_calendar_upd_date, NOW() - INTERVAL 1 DAY)) AND hss.id_portfolio = ?1 ORDER BY tdp.trading_date 
HoldSecurityaccountSecurity.getCombinedHolidayOfHoldingsByTenant=SELECT DISTINCT tdp.trading_date AS holdDate FROM security s JOIN trading_days_plus tdp LEFT JOIN trading_days_minus tdm ON tdp.trading_date = tdm.trading_date_minus AND tdm.id_stockexchange = s.id_stockexchange JOIN hold_securityaccount_security hss ON hss.id_securitycurrency = s.id_securitycurrency AND tdp.trading_date >= hss.from_hold_date AND (tdp.trading_date <= hss.to_hold_date OR hss.to_hold_date IS NULL) JOIN stockexchange se ON se.id_stockexchange = s.id_stockexchange AND se.id_stockexchange = tdm.id_stockexchange WHERE se.no_market_value = 0 AND tdp.trading_date <= CURDATE() AND hss.id_tenant = ?1   
HoldSecurityaccountSecurity.getCombinedHolidayOfHoldingsByPortfolio=SELECT DISTINCT tdp.trading_date AS holdDate FROM security s JOIN trading_days_plus tdp LEFT JOIN trading_days_minus tdm ON tdp.trading_date = tdm.trading_date_minus AND tdm.id_stockexchange = s.id_stockexchange JOIN hold_securityaccount_security hss ON hss.id_securitycurrency = s.id_securitycurrency AND tdp.trading_date >= hss.from_hold_date AND (tdp.trading_date <= hss.to_hold_date OR hss.to_hold_date IS NULL) JOIN stockexchange se ON se.id_stockexchange = s.id_stockexchange AND se.id_stockexchange = tdm.id_stockexchange WHERE se.no_market_value = 0 AND tdp.trading_date <= CURDATE() AND hss.id_portfolio = ?1
HoldSecurityaccountSecurity.getPeriodHoldingsByTenant=SELECT x.date, x.dividendRealMC, x.feeRealMC, interestCashaccountRealMC, x.accumulateReduceMC, x.cashBalanceMC, IFNULL(x.externalCashTransferMC, 0) AS externalCashTransferMC, x.securitiesMC, x.marginCloseGainMC, x.securityRiskMC, IFNULL(IFNULL(x.cashBalanceMC, 0) + IFNULL(x.securitiesMC, 0) - IFNULL(x.externalCashTransferMC, 0), 0) as gainMC FROM (SELECT b.*, ROUND(SUM(hcb.balance * IFNULL(hqc1.close, 1)), 2) as cashBalanceMC, ROUND(SUM(hcb.dividend * IFNULL(hqc1.close, 1)), 2) as dividendRealMC, ROUND(SUM(hcb.accumulate_reduce * IFNULL(hqc1.close, 1)), 2) as accumulateReduceMC, ROUND(SUM(hcb.interest_cashaccount * IFNULL(hqc1.close, 1)), 2) as interestCashaccountRealMC, ROUND(SUM(hcb.fee * IFNULL(hqc1.close, 1)) * -1, 2)  as feeRealMC FROM (SELECT tdp.trading_date as date, ROUND(SUM(hss.holdings * hss.split_price_factor * IF(hss.margin_average_price IS NULL, 1, 0) * (IFNULL(hqs.close, 0) + IFNULL(hqp.price, 0)) * IFNULL(hqc0.close, 1)), 2) as securitiesMC, ROUND(SUM(hss.holdings * hss.split_price_factor * IF(hss.margin_average_price IS  NULL, 0, 1) * (IFNULL(hqs.close - hss.margin_average_price / hss.split_price_factor, 0)) * IFNULL(hqc0.close, 1)), 2) as marginCloseGainMC, ROUND(sum(hss.holdings * hss.split_price_factor * (IFNULL(hqs.close, 0) + IFNULL(hqp.price, 0)) * IFNULL(hqc0.close, 1)), 2) as securityRiskMC, SUM(IF(hqs.close IS NULL, 0, 1)) + SUM(IF(hqp.price IS NULL, 0, 1)) as countQuotes, (SELECT count(hss1.id_securitycurrency) FROM hold_securityaccount_security hss1 WHERE hss1.from_hold_date <= tdp.trading_date AND (tdp.trading_date <= hss1.to_hold_date OR hss1.to_hold_date IS NULL) AND hss1.id_tenant = ?1) as countSecurities, ROUND((SELECT sum(hcd.deposit_tenant_currency) FROM hold_cashaccount_deposit hcd WHERE hcd.from_hold_date <= tdp.trading_date AND (tdp.trading_date <= hcd.to_hold_date OR hcd.to_hold_date IS NULL) AND hcd.id_tenant = ?1), 2) as externalCashTransferMC FROM hold_securityaccount_security hss JOIN trading_days_plus tdp ON hss.from_hold_date <= tdp.trading_date AND (tdp.trading_date <= hss.to_hold_date OR hss.to_hold_date IS NULL) LEFT JOIN historyquote hqs ON hss.id_securitycurrency = hqs.id_securitycurrency AND tdp.trading_date = hqs.date LEFT JOIN historyquote hqc0 on hss.id_currency_pair_tenant = hqc0.id_securitycurrency AND tdp.trading_date = hqc0.date LEFT JOIN historyquote_period hqp ON hss.id_securitycurrency = hqp.id_securitycurrency AND (tdp.trading_date >= hqp.from_date AND tdp.trading_date <= hqp.to_date OR hqp.to_date IS NULL) WHERE hss.id_tenant = ?1 AND tdp.trading_date BETWEEN ?2 AND ?3 GROUP BY tdp.trading_date HAVING countQuotes = countSecurities ORDER BY tdp.trading_date DESC) as b JOIN hold_cashaccount_balance hcb ON hcb.from_hold_date <= b.date AND (hcb.to_hold_date >= b.date OR hcb.to_hold_date IS NULL) AND hcb.id_tenant =?1 LEFT JOIN historyquote hqc1 ON b.date = hqc1.date AND hcb.id_currency_pair_tenant = hqc1.id_securitycurrency GROUP BY b.date ORDER BY b.date) as x  
HoldSecurityaccountSecurity.getPeriodHoldingsByPortfolio=SELECT x.date, x.dividendRealMC, x.feeRealMC, interestCashaccountRealMC, x.accumulateReduceMC, x.cashBalanceMC, IFNULL(x.externalCashTransferMC, 0) AS externalCashTransferMC, x.securitiesMC, x.marginCloseGainMC, x.securityRiskMC, IFNULL(IFNULL(x.cashBalanceMC, 0) + IFNULL(x.securitiesMC, 0) - IFNULL(x.externalCashTransferMC, 0), 0) as gainMC FROM (SELECT b.*, ROUND(SUM(hcb.balance * IFNULL(hqc1.close, 1)), 2) as cashBalanceMC, ROUND(SUM(hcb.dividend * IFNULL(hqc1.close, 1)), 2) as dividendRealMC, ROUND(SUM(hcb.accumulate_reduce * IFNULL(hqc1.close, 1)), 2)  as accumulateReduceMC, ROUND(SUM(hcb.interest_cashaccount * IFNULL(hqc1.close, 1)), 2) as interestCashaccountRealMC, ROUND(SUM(hcb.fee * IFNULL(hqc1.close, 1)) * -1, 2)  as feeRealMC FROM (SELECT tdp.trading_date as date, ROUND(SUM(hss.holdings * hss.split_price_factor * IF(hss.margin_average_price IS NULL, 1, 0) * (IFNULL(hqs.close, 0) + IFNULL(hqp.price, 0)) * IFNULL(hqc0.close, 1)), 2) as securitiesMC, ROUND(SUM(hss.holdings * hss.split_price_factor * IF(hss.margin_average_price IS  NULL, 0, 1) * (IFNULL(hqs.close - hss.margin_average_price / hss.split_price_factor, 0)) * IFNULL(hqc0.close, 1)), 2) as marginCloseGainMC, ROUND(sum(hss.holdings * hss.split_price_factor * (IFNULL(hqs.close, 0) + IFNULL(hqp.price, 0)) * IFNULL(hqc0.close, 1)), 2) as securityRiskMC, SUM(IF(hqs.close IS NULL, 0, 1)) + SUM(IF(hqp.price IS NULL, 0, 1)) as countQuotes, (SELECT count(hss1.id_securitycurrency) FROM hold_securityaccount_security hss1 WHERE hss1.from_hold_date <= tdp.trading_date AND (tdp.trading_date <= hss1.to_hold_date OR hss1.to_hold_date IS NULL) AND hss1.id_portfolio = ?1) as countSecurities, ROUND((SELECT sum(hcd.deposit_portfolio_currency) FROM hold_cashaccount_deposit hcd WHERE hcd.from_hold_date <= tdp.trading_date AND (tdp.trading_date <= hcd.to_hold_date OR hcd.to_hold_date IS NULL) AND hcd.id_portfolio = ?1), 2) as externalCashTransferMC FROM hold_securityaccount_security hss JOIN trading_days_plus tdp ON hss.from_hold_date <= tdp.trading_date AND (tdp.trading_date <= hss.to_hold_date OR hss.to_hold_date IS NULL) LEFT JOIN historyquote hqs ON hss.id_securitycurrency = hqs.id_securitycurrency AND tdp.trading_date = hqs.date LEFT JOIN historyquote hqc0 on hss.id_currency_pair_portfolio = hqc0.id_securitycurrency AND tdp.trading_date = hqc0.date LEFT JOIN historyquote_period hqp ON hss.id_securitycurrency = hqp.id_securitycurrency AND (tdp.trading_date >= hqp.from_date AND tdp.trading_date <= hqp.to_date OR hqp.to_date IS NULL) WHERE hss.id_portfolio = ?1 AND tdp.trading_date BETWEEN ?2 AND ?3 GROUP BY tdp.trading_date HAVING countQuotes = countSecurities ORDER BY tdp.trading_date DESC) as b JOIN hold_cashaccount_balance hcb ON hcb.from_hold_date <= b.date AND (hcb.to_hold_date >= b.date OR hcb.to_hold_date IS NULL) AND hcb.id_portfolio = ?1 LEFT JOIN historyquote hqc1 ON b.date = hqc1.date AND hcb.id_currency_pair_tenant = hqc1.id_securitycurrency GROUP BY b.date ORDER BY b.date) as x 
HoldSecurityaccountSecurity.getIdSecurityByIdTenantWithHoldings=SELECT hss.id_securitycurrency FROM hold_securityaccount_security hss WHERE hss.id_tenant = ?1 AND hss.to_hold_date IS NULL
 
ImportTransactionPos.getIdTransactionPosWithPossibleTransactionByIdTransactionPos=SELECT ip.id_trans_pos, t.id_transaction FROM imp_trans_head ih JOIN imp_trans_pos ip ON ih.id_trans_head = ip.id_trans_head JOIN transaction t ON ip.id_securitycurrency = t.id_securitycurrency AND ip.transaction_type = t.transaction_type AND ih.id_securitycash_account = t.id_security_account AND DATE(ip.transaction_time) = t.tt_date AND ip.units = t.units WHERE ip.id_trans_pos IN(?1) AND (ip.id_transaction_maybe <> 0 OR ip.id_transaction_maybe IS NULL) AND ip.id_transaction IS NULL ORDER BY ip.id_trans_pos
ImportTransactionPos.getIdTransactionPosWithPossibleTransactionByIdTransactionHead=SELECT ip.id_trans_pos, t.id_transaction FROM imp_trans_head ih JOIN imp_trans_pos ip ON ih.id_trans_head = ip.id_trans_head JOIN transaction t ON ip.id_securitycurrency = t.id_securitycurrency AND ip.transaction_type = t.transaction_type AND ih.id_securitycash_account = t.id_security_account AND DATE(ip.transaction_time) = t.tt_date AND ip.units = t.units WHERE ip.id_trans_head = ?1 AND (ip.id_transaction_maybe <> 0 OR ip.id_transaction_maybe IS NULL) AND ip.id_transaction IS NULL ORDER BY ip.id_trans_pos     

ImportTransactionTemplate.getTemplateIdPurposeCsv=SELECT itp.id_trans_imp_template AS idTransactionImportTemplate, itp.template_purpose AS templatePurpose, CAST(REGEXP_SUBSTR(itp.template_as_txt, '(?<=templateId\\\\=)(\\\\d+)(?:\\\\R)') AS INT) AS templateId FROM imp_trans_template itp WHERE itp.id_trans_imp_platform = ?1 AND itp.template_format_type = 1        
ImportTransactionTemplate.getImportTemplateByImportTransPos=SELECT DISTINCT t.* FROM imp_trans_template t, imp_trans_pos p WHERE t.id_trans_imp_template = p.id_trans_imp_template AND p.id_trans_head = ?1 AND p.id_tenant = ?2
 
MailInbox.findByUserOrGroup=SELECT m.*, mio.* FROM mail_inbox m JOIN mail_in_out mio ON m.id_mail_inout = mio.id_mail_inout LEFT JOIN user_role ur ON ur.id_role = mio.id_role_to JOIN user u ON u.id_user = ur.id_user WHERE u.id_user = ?1 UNION SELECT m.*, mio.* FROM mail_inbox m JOIN mail_in_out mio ON m.id_mail_inout = mio.id_mail_inout WHERE mio.id_user_to = ?1 

Portfolio.getExistingTransactionOnSecurityaccount=SELECT sca.id_securitycash_account FROM portfolio p JOIN securitycashaccount sca ON p.id_portfolio = sca.id_portfolio JOIN securityaccount sa ON sca.id_securitycash_account = sa.id_securitycash_account WHERE p.id_tenant = ?1 AND EXISTS (SELECT * FROM transaction t WHERE t.id_security_account = sa.id_securitycash_account)

Security.getUnusedSecurityForAlgo=SELECT s.*, sc.*, a.* FROM securitycurrency sc, algo_top_asset_security ata, algo_assetclass aa JOIN assetclass a ON aa.id_asset_class = a.id_asset_class JOIN security s ON a.id_asset_class = s.id_asset_class WHERE (s.id_tenant_private IS NULL OR s.id_tenant_private = ?1) AND s.id_securitycurrency = sc.id_securitycurrency AND ata.id_tenant = ?1 AND aa.id_algo_assetclass_security = ?2 AND ata.id_algo_assetclass_security = aa.id_algo_assetclass_security AND s.id_securitycurrency NOT IN (SELECT ass.id_securitycurrency FROM algo_assetclass aa JOIN algo_security ass ON aa.id_algo_assetclass_security = ass.id_algo_assetclass_security_p WHERE aa.id_algo_assetclass_security = ?2) ORDER BY s.name
Security.getHistoryquoteQualityConnectorFlat=SELECT sc.id_connector_history AS idConnectorHistory, se.name AS stockexchangeName, se.id_stockexchange AS idStockexchange, a.category_type AS categoryType, a.spec_invest_instrument AS specialInvestmentInstrument, COUNT(*) AS numberOfSecurities, SUM(IF(s.active_to_date >= NOW(), 1, 0)) AS activeNowSecurities, SUM(hqq.connectorCreated) AS connectorCreated, SUM(hqq.manualImported) AS manualImported, SUM(hqq.filledLinear) AS filledLinear, AVG(hqq.qualityPercentage) AS qualityPercentage FROM stockexchange se JOIN security s ON se.id_stockexchange = s.id_stockexchange JOIN assetclass a ON s.id_asset_class = a.id_asset_class JOIN historyquote_quality hqq ON hqq.idSecurity = s.id_securitycurrency JOIN securitycurrency sc ON sc.id_securitycurrency = s.id_securitycurrency WHERE sc.id_connector_history IS NOT NULL AND se.no_market_value = 0 AND s.id_tenant_private IS NULL GROUP BY sc.id_connector_history, se.id_stockexchange, a.category_type, a.spec_invest_instrument ORDER BY sc.id_connector_history, se.id_stockexchange, a.category_type, a.spec_invest_instrument
Security.getHistoryquoteQualityStockexchangeFlat=SELECT sc.id_connector_history AS idConnectorHistory, se.name AS stockexchangeName, se.id_stockexchange AS idStockexchange, a.category_type AS categoryType, a.spec_invest_instrument AS specialInvestmentInstrument, COUNT(*) AS numberOfSecurities, SUM(IF(s.active_to_date >= NOW(), 1, 0)) AS activeNowSecurities, SUM(hqq.connectorCreated) AS connectorCreated, SUM(hqq.manualImported) AS manualImported, SUM(hqq.filledLinear) AS filledLinear, AVG(hqq.qualityPercentage) AS qualityPercentage FROM stockexchange se JOIN security s ON se.id_stockexchange = s.id_stockexchange JOIN assetclass a ON s.id_asset_class = a.id_asset_class JOIN historyquote_quality hqq ON hqq.idSecurity = s.id_securitycurrency JOIN securitycurrency sc ON sc.id_securitycurrency = s.id_securitycurrency WHERE sc.id_connector_history IS NOT NULL AND se.no_market_value = 0 AND s.id_tenant_private IS NULL GROUP BY se.id_stockexchange, sc.id_connector_history, a.category_type, a.spec_invest_instrument ORDER BY se.id_stockexchange, sc.id_connector_history, a.category_type, a.spec_invest_instrument
Security.getHistoryquoteQualityByIds=SELECT s.name, s.currency, s.active_from_date AS activeFromDate, s.active_to_date AS activeToDate, hqq.* FROM historyquote_quality hqq JOIN security s ON hqq.idSecurity = s.id_securitycurrency JOIN securitycurrency sc ON s.id_securitycurrency = sc.id_securitycurrency JOIN assetclass ac ON s.id_asset_class = ac.id_asset_class WHERE sc.id_connector_history = ?1 AND s.id_stockexchange = ?2 AND ac.category_type = ?3 AND ac.spec_invest_instrument = ?4  
Security.getBySecurityDerivedLinkByIdSecurityLink=SELECT s.id_link_securitycurrency AS idLinkSecuritycurrency, s.formula_prices AS formulaPrices, s.id_securitycurrency AS idSecuritycurrency FROM ( SELECT s.id_link_securitycurrency, s.formula_prices, s.id_securitycurrency FROM security s WHERE s.id_link_securitycurrency = ?1 UNION DISTINCT SELECT s.id_link_securitycurrency, s.formula_prices, s.id_securitycurrency FROM security s JOIN security_derived_link sdl ON s.id_securitycurrency = sdl.id_securitycurrency WHERE sdl.id_link_securitycurrency = ?1) AS s GROUP BY s.id_securitycurrency 
Security.getSecurityYearCloseDivSum=SELECt h.date, h.close securityClose, IFNULL(dd.yearDiv, 0) yearDiv FROM historyquote h LEFT JOIN (SELECt YEAR(d.ex_date) exDate, d.id_securitycurrency, SUM(d.amount_adjusted) AS yearDiv FROM dividend d GROUP BY d.id_securitycurrency, YEAR(d.ex_date)) dd ON YEAR(h.date) = dd.exDate AND h.id_securitycurrency = dd.id_securitycurrency WHERE (h.id_securitycurrency, h.date) IN (SELECT h1.id_securitycurrency, MAX(h1.date) FROM historyquote h1 WHERE h1.id_securitycurrency = ?1 GROUP BY YEAR(h1.date)) ORDER BY h.date DESC
Security.getSecurityYearDivSumCurrencyClose=SELECt h.date, h.close securityClose, IFNULL(dd.yearDiv, 0) yearDiv, hc.close currencyClose FROM historyquote h LEFT JOIN (SELECt YEAR(d.ex_date) exDate, d.id_securitycurrency, SUM(d.amount_adjusted) AS yearDiv FROM dividend d GROUP BY d.id_securitycurrency, YEAR(d.ex_date)) dd ON YEAR(h.date) = dd.exDate AND h.id_securitycurrency = dd.id_securitycurrency, historyquote hc WHERE h.date = hc.date AND hc.id_securitycurrency = ?2 AND (h.id_securitycurrency, h.date) IN (SELECT h1.id_securitycurrency, MAX(h1.date) FROM historyquote h1 WHERE h1.id_securitycurrency = ?1 GROUP BY YEAR(h1.date)) ORDER BY h.date DESC  
Security.getMaxHistoryquoteWithConnectorForExchange=SELECT s as securityCurrency, MAX(h.date) AS date FROM Security s JOIN s.historyquoteList h JOIN s.stockexchange se WHERE s.retryHistoryLoad < ?1 AND s.idConnectorHistory IS NOT NULL AND se.idStockexchange IN (?2) GROUP BY h.idSecuritycurrency HAVING s.activeToDate >= MAX(h.date) ORDER BY s.idSecuritycurrency 
 
Securityaccount.getAllTransactionCostByTenant=SELECT t.id_tenant AS idTenant, t.id_security_account AS idSecurityaccount, ROUND(t.units * t.quotation * IF(t.currency_ex_rate IS NOT NULL AND c2.to_currency = p.currency, t.currency_ex_rate, IF(h1.close IS NULL, 1, h1.close)), 2) AS price, a.spec_invest_instrument AS specInvestInstrument, a.category_type AS categoryType, se.id_stockexchange AS idStockexchange, ROUND(t.transaction_cost * IF(t.currency_ex_rate IS NOT NULL AND c2.to_currency = p.currency, t.currency_ex_rate, IF(h1.close IS NULL, 1, h1.close)), 2) AS transactionCost FROM transaction t JOIN security s ON t.id_securitycurrency = s.id_securitycurrency JOIN stockexchange se ON s.id_stockexchange = se.id_stockexchange JOIN assetclass a ON a.id_asset_class = s.id_asset_class JOIN securitycashaccount sa ON t.id_security_account = sa.id_securitycash_account JOIN portfolio p ON p.id_portfolio = sa.id_portfolio JOIN securityaccount sc ON sc.id_securitycash_account = t.id_security_account LEFT JOIN currencypair c1 ON c1.from_currency = s.currency AND c1.to_currency = p.currency LEFT JOIN historyquote h1 ON t.tt_date = h1.date AND h1.id_securitycurrency = c1.id_securitycurrency LEFT JOIN currencypair c2 ON c2.id_securitycurrency = t.id_currency_pair WHERE t.transaction_cost IS NOT NULL AND t.transaction_type >= 4 AND t.transaction_type <= 5 AND sc.lowest_transaction_cost <= ROUND(t.transaction_cost * IF(t.currency_ex_rate IS NOT NULL AND c2.to_currency = p.currency, t.currency_ex_rate, IF(h1.close IS NULL, 1, h1.close)), 2) AND t.id_tenant = ?1 ORDER BY t.id_tenant, t.id_security_account
Securityaccount.getAllTransactionCostBySecurityaccount=SELECT t.id_tenant AS idTenant, t.id_security_account AS idSecurityaccount, ROUND(t.units * t.quotation * IF(t.currency_ex_rate IS NOT NULL AND c2.to_currency = p.currency, t.currency_ex_rate, IF(h1.close IS NULL, 1, h1.close)), 2) AS price, a.spec_invest_instrument AS specInvestInstrument, a.category_type AS categoryType, se.id_stockexchange AS idStockexchange, ROUND(t.transaction_cost * IF(t.currency_ex_rate IS NOT NULL AND c2.to_currency = p.currency, t.currency_ex_rate, IF(h1.close IS NULL, 1, h1.close)), 2) AS transactionCost FROM transaction t JOIN security s ON t.id_securitycurrency = s.id_securitycurrency JOIN stockexchange se ON s.id_stockexchange = se.id_stockexchange JOIN assetclass a ON a.id_asset_class = s.id_asset_class JOIN securitycashaccount sa ON t.id_security_account = sa.id_securitycash_account JOIN portfolio p ON p.id_portfolio = sa.id_portfolio JOIN securityaccount sc ON sc.id_securitycash_account = t.id_security_account LEFT JOIN currencypair c1 ON c1.from_currency = s.currency AND c1.to_currency = p.currency LEFT JOIN historyquote h1 ON t.tt_date = h1.date AND h1.id_securitycurrency = c1.id_securitycurrency LEFT JOIN currencypair c2 ON c2.id_securitycurrency = t.id_currency_pair WHERE t.transaction_cost IS NOT NULL AND t.transaction_type >= 4 AND t.transaction_type <= 5 AND sc.lowest_transaction_cost <= ROUND(t.transaction_cost * IF(t.currency_ex_rate IS NOT NULL AND c2.to_currency = p.currency, t.currency_ex_rate, IF(h1.close IS NULL, 1, h1.close)), 2) AND t.id_security_account = ?1 ORDER BY t.id_tenant, t.id_security_account
 
Securitysplit.getByIdWatchlist=SELECT s.* FROM securitysplit s, watchlist_sec_cur w WHERE w.id_watchlist = ?1 AND w.id_securitycurrency = s.id_securitycurrency ORDER BY s.id_securitycurrency, s.split_date ASC
Securitysplit.getByIdTenant=SELECT DISTINCT sp.* FROM portfolio p, securitysplit sp, securitycashaccount sca, transaction t, security s WHERE p.id_tenant = ?1 AND p.id_portfolio = sca.id_portfolio AND sca.id_securitycash_account = t.id_security_account AND t.id_securitycurrency = s.id_securitycurrency AND s.id_securitycurrency = sp.id_securitycurrency ORDER BY sp.id_securitycurrency, sp.split_date ASC
Securitysplit.getSplitFactorAfterThanEqualDate=SELECT ROUND(EXP(SUM(LOG(s.to_factor / s.from_factor))), 1) AS factor FROM securitysplit s WHERE s.id_securitycurrency = ?1 AND s.split_date > ?2
Securitysplit.getByIdSecuritycashaccount=SELECT DISTINCT sp.* from securitysplit sp, securityaccount sa, transaction t WHERE sa.id_securitycash_account = ?1 AND sa.id_securitycash_account = t.id_security_account AND t.id_securitycurrency = sp.id_securitycurrency ORDER BY sp.id_securitycurrency, sp.split_date ASC

Stockexchange.getIdStockexchangeAndIndexNameForCalendarUpd=SELECT se.id_stockexchange AS idStockexchange, s.name AS nameIndexSecurity FROM stockexchange se JOIN security s ON se.id_index_upd_calendar = s.id_securitycurrency 
Stockexchange.stockexchangeHasSecurity=SELECT (CASE WHEN EXISTS(SELECT NULL FROM security s WHERE s.id_stockexchange = e.id_stockexchange)THEN 1 ELSE 0 END) AS has_security FROM stockexchange e WHERE e.id_stockexchange = ?1
Stockexchange.stockexchangesHasSecurity=SELECT e.id_stockexchange AS id, (CASE WHEN EXISTS(SELECT NULL FROM security s WHERE s.id_stockexchange = e.id_stockexchange) THEN 1 ELSE 0 END) AS s FROM stockexchange e

TradingDaysPlus.getGlobalHolidays=SELECT DATE(ad.weekday) FROM trading_days_plus tdp RIGHT JOIN (SELECT '2000-01-01' + INTERVAL (seq) DAY AS weekday FROM seq_0_to_100000 HAVING WEEKDAY(weekday) NOT IN (5,6)) AS ad ON ad.weekday = tdp.trading_date WHERE tdp.trading_date IS NULL AND ad.weekday <= (SELECT MAX(tdp.trading_date) FROM trading_days_plus tdp)


Transaction.findByIdWatchlist=SELECT t FROM Watchlist w JOIN  w.securitycurrencyList s, Portfolio p JOIN p.securitycashaccountList a JOIN a.securityTransactionList t JOIN Fetch t.security JOIN Fetch t.cashaccount WHERE p.idTenant = w.idTenant AND w.idWatchlist = ?1 AND s.idSecuritycurrency = t.security.idSecuritycurrency ORDER BY t.transactionTime 
Transaction.getTransactionWhyHistoryquoteYounger=SELECT t.* FROM transaction t JOIN (SELECT t.id_cash_account, t.transaction_time FROM transaction t JOIN portfolio p ON p.id_tenant = t.id_tenant JOIN securitycashaccount sc ON t.id_cash_account = sc.id_securitycash_account AND sc.id_portfolio = p.id_portfolio JOIN cashaccount c ON c.id_securitycash_account = sc.id_securitycash_account JOIN currencypair cp ON cp.from_currency = c.currency AND cp.to_currency = p.currency JOIN historyquote h ON h.id_securitycurrency = cp.id_securitycurrency AND h.date = t.tt_date JOIN hold_cashaccount_deposit hcd ON hcd.from_hold_date = h.date AND hcd.id_securitycash_account = c.id_securitycash_account WHERE t.transaction_type <= 1 AND c.currency <> p.currency AND hcd.valid_timestamp < h.create_modify_time UNION SELECT t.id_cash_account, t.transaction_time FROM transaction t JOIN tenant te ON t.id_tenant = te.id_tenant JOIN portfolio p ON p.id_tenant = t.id_tenant JOIN securitycashaccount sc ON t.id_cash_account = sc.id_securitycash_account AND sc.id_portfolio = p.id_portfolio JOIN cashaccount c ON c.id_securitycash_account = sc.id_securitycash_account JOIN currencypair cp ON cp.from_currency = c.currency AND cp.to_currency = te.currency JOIN historyquote h ON h.id_securitycurrency = cp.id_securitycurrency AND h.date = t.tt_date JOIN hold_cashaccount_deposit hcd ON hcd.from_hold_date = h.date AND hcd.id_securitycash_account = c.id_securitycash_account WHERE t.transaction_type <= 1 AND c.currency <> te.currency AND hcd.valid_timestamp < h.create_modify_time) AS t1 ON t.id_cash_account = t1.id_cash_account JOIN cashaccount c ON t.id_cash_account = c.id_securitycash_account JOIN securitycashaccount sc ON c.id_securitycash_account = sc.id_securitycash_account WHERE t.transaction_time >= t1.transaction_time AND t.transaction_type <= 1 ORDER BY t.id_tenant, t.id_cash_account, t.transaction_time

UserEntityChangeCount.getCudTransactionAndUserLimit=SELECT c.count_insert + c.count_update + c.count_delete as cudTrans, l.day_limit as dayLimit FROM user_entity_change_count c LEFT JOIN user_entity_change_limit l on l.id_user = c.id_user AND l.entity_name = c.entity_name AND l.until_date >= CURDATE() WHERE c.id_user = ?1 AND c.date = CURDATE() AND c.entity_name=?2

Watchlist.watchlistSecuritiesHasTransactionOrOtherWatchlist=(SELECT s.id_securitycurrency AS id_securitycurrency FROM security s, watchlist_sec_cur w WHERE w.id_watchlist = ?1 AND s.id_securitycurrency = w.id_securitycurrency AND s.id_securitycurrency IN (SELECT t.id_securitycurrency FROM transaction t WHERE t.id_securitycurrency IS NOT NULL)) UNION (SELECT s.id_securitycurrency AS id_securitycurrency FROM security s, watchlist_sec_cur w WHERE w.id_watchlist = ?1 AND s.id_securitycurrency = w.id_securitycurrency AND s.id_securitycurrency IN (SELECT w1.id_securitycurrency FROM watchlist_sec_cur w1 WHERE w1.id_watchlist <> ?1 AND w1.id_securitycurrency IS NOT NULL)) ORDER BY id_securitycurrency
Watchlist.watchlistCurrencypairsHasReferencesButThisWatchlist=(SELECT DISTINCT c.id_securitycurrency AS id_securitycurrency FROM tenant t, portfolio p, currencypair c WHERE t.id_tenant = p.id_tenant AND c.from_currency = p.currency AND c.to_currency = t.currency) UNION (SELECT DISTINCT c.id_securitycurrency AS id_securitycurrency FROM tenant t, portfolio p, securitycashaccount sc, cashaccount ca, currencypair c WHERE t.id_tenant = p.id_tenant AND p.id_portfolio = sc.id_portfolio  AND sc.id_securitycash_account = ca.id_securitycash_account AND c.from_currency = ca.currency AND c.to_currency = t.currency) UNION (SELECT DISTINCT c.id_securitycurrency AS id_securitycurrency FROM portfolio p, securitycashaccount sc, cashaccount ca, currencypair c WHERE p.id_portfolio = sc.id_portfolio  AND sc.id_securitycash_account = ca.id_securitycash_account AND c.from_currency = ca.currency AND c.to_currency = p.currency) UNION (SELECT DISTINCT c.id_securitycurrency AS id_securitycurrency FROM currencypair c, transaction t WHERE c.id_securitycurrency = t.id_currency_pair) UNION (SELECT DISTINCT c.id_securitycurrency AS id_securitycurrency FROM currencypair c, watchlist_sec_cur w WHERE w.id_watchlist = ?1 AND c.id_securitycurrency = w.id_securitycurrency AND c.id_securitycurrency IN (SELECT w1.id_securitycurrency FROM watchlist_sec_cur w1 WHERE w1.id_watchlist <> ?1 AND w1.id_securitycurrency IS NOT NULL)) ORDER BY id_securitycurrency
Watchlist.watchlistSecuritiesHasOpenOrClosedTransactionForThisTenant=SELECT DISTINCT t.id_securitycurrency AS id_securitycurrency FROM watchlist_sec_cur ws, securitycashaccount sa, transaction t WHERE ws.id_watchlist = ?1 AND sa.id_tenant = ?2 AND sa.id_securitycash_account = t.id_security_account AND ws.id_securitycurrency = t.id_securitycurrency ORDER BY t.id_securitycurrency
Watchlist.deleteByIdTenantAndWatchlistAndIds=DELETE s FROM watchlist w JOIN watchlist_sec_cur s ON w.id_watchlist = s.id_watchlist WHERE w.id_tenant = ?1 AND w.id_watchlist = ?2 AND s.id_securitycurrency IN (?3)
Watchlist.hasSplitOrDividendByWatchlist=SELECT d.id_securitycurrency FROM watchlist_sec_cur wsc JOIN dividend d ON wsc.id_securitycurrency = d.id_securitycurrency WHERE wsc.id_watchlist = ?1 GROUP BY d.id_securitycurrency UNION SELECT ss.id_securitycurrency FROM watchlist_sec_cur wsc JOIN securitysplit ss ON wsc.id_securitycurrency = ss.id_securitycurrency WHERE wsc.id_watchlist = ?1 GROUP BY ss.id_securitycurrency
Watchlist.watchlistsOfTenantHasSecurity=SELECT w.id_watchlist,(CASE WHEN EXISTS(SELECT NULL FROM watchlist_sec_cur s WHERE s.id_watchlist = w.id_watchlist)THEN 1 ELSE 0 END) AS has_security FROM watchlist w WHERE w.id_tenant = ?1