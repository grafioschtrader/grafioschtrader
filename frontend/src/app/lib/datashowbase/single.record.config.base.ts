import {DataType} from '../../dynamic-form/models/data.type';
import {ColumnConfig, OptionalParams} from './column.config';
import {GlobalparameterService} from '../../shared/service/globalparameter.service';
import {TranslateService} from '@ngx-translate/core';
import {ShowRecordConfigBase} from './show.record.config.base';

/**
 * Show a singe record with the same definition as a table.
 */
export abstract class SingleRecordConfigBase extends ShowRecordConfigBase {

  /**
   * Exposes the global Object constructor for use in Angular templates.
   * Required for template operations like Object.keys() iteration.
   */
  Object = Object;

  /** Private cache for grouped field configurations */
  _fieldSetGroups: { [fieldSetName: string]: ColumnConfig };

  /**
   * Creates a new single record configuration.
   *
   * @param translateService - Angular translation service for internationalization
   * @param gps - Global parameter service for locale and formatting settings
   */
  protected constructor(translateService: TranslateService, gps: GlobalparameterService) {
    super(translateService, gps);
  }

  /**
   * Gets field configurations organized by their fieldset names.
   * Fields are automatically grouped by their `fieldsetName` property to create
   * organized sections for display. Groups are cached for performance.
   *
   * @returns Object with fieldset names as keys and arrays of ColumnConfig as values
   * @example
   * ```typescript
   * // Returns: {
   * //   'personal': [firstNameConfig, lastNameConfig],
   * //   'contact': [emailConfig, phoneConfig]
   * // }
   * const groups = this.fieldSetGroups;
   * ```
   */
  get fieldSetGroups(): { [fieldSetName: string]: ColumnConfig } {
    this._fieldSetGroups = this._fieldSetGroups || this.group(this.fields, 'fieldsetName');
    return this._fieldSetGroups;
  }

  getFieldsForFieldSet(fieldSetName: string): ColumnConfig[] {
    const groups = this.fieldSetGroups;
    return (groups[fieldSetName] || []) as ColumnConfig[];
  }

  /**
   * Adds a field property with explicit header key for single record display.
   * Convenience method that sets visibility and changeVisibility to true by default.
   *
   * @param dataType - The data type for formatting and display
   * @param field - The property name used to access data from objects
   * @param headerKey - The translation key for the field label
   * @param optionalParams - Additional configuration options
   * @returns The created ColumnConfig object
   */
  addFieldProperty(dataType: DataType, field: string, headerKey: string,
                   optionalParams?: OptionalParams): ColumnConfig {
    return this.addColumn(dataType, field, headerKey, true, true, optionalParams);
  }

  /**
   * Adds a field property with auto-generated header key for single record display.
   * Header key is automatically generated by converting field name to uppercase with underscores.
   *
   * @param dataType - The data type for formatting and display
   * @param field - The property name used to access data and generate header key
   * @param optionalParams - Additional configuration options
   * @returns The created ColumnConfig object
   */
  addFieldPropertyFeqH(dataType: DataType, field: string, optionalParams?: OptionalParams): ColumnConfig {
    return this.addColumnFeqH(dataType, field, true, true, optionalParams);
  }

  /**
   * Groups an array of objects by a specified property.
   * Utility method for organizing items into categorized collections.
   *
   * @param list - Array of objects to group
   * @param prop - Property name to group by
   * @returns Object with property values as keys and arrays of matching items as values
   */
  group(list, prop) {
    return list.reduce((grouped, item) => {
      const key = item[prop];
      grouped[key] = grouped[key] || [];
      grouped[key].push(item);
      return grouped;
    }, {});
  }

}

